<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LumaQQ.NET</name>
    </assembly>
    <members>
        <member name="T:LumaQQ.NET.ConnectionManager">
            <summary>
            连接管理
            	<remark>abu 2008-03-06 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.#ctor(LumaQQ.NET.QQClient)">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.ConnectionManager"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.SetConnectionPool(LumaQQ.NET.Net.IConnectionPool)">
            <summary>用户可以使用这个方法更改连接池的实现
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="pool">The pool.</param>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.EnsureConnection(System.String,System.Boolean)">
            <summary>确认指定的PortName的连接存在
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="serverHost">The server host.</param>
            <param name="port">The port.</param>
            <param name="portName">Name of the port.</param>
            <param name="start">if set to <c>true</c> [start].</param>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.GetConnection(System.String)">
            <summary>
            根据连接名称获得连接
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <param name="portName">Name of the port.</param>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.OnConnectServerError(System.Exception)">
            <summary>
            Raises the <see cref="E:ConnectServerError"/> event.
            </summary>
            <param name="e">The <see cref="T:LumaQQ.NET.Events.ErrorEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.OnNetworkError(System.Exception)">
            <summary>
            Called when [network error].
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.OnConnectSuccessed">
            <summary>
            Called when [connect successed].
            </summary>
        </member>
        <member name="M:LumaQQ.NET.ConnectionManager.OnReceivedKeepAlive(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.KeepAliveReplyPacket,LumaQQ.NET.Packets.Out.KeepAlivePacket})">
            <summary>
            Raises the <see cref="E:ReceivedKeepAlive"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.KeepAliveReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:LumaQQ.NET.ConnectionManager.ConnectionPool">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.ConnectionManager.QQClient">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="E:LumaQQ.NET.ConnectionManager.NetworkError">
            <summary>
            一般网络错误事件
            	<remark>abu 2008-03-06 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.ConnectionManager.ConnectSuccessed">
            <summary>
            网络连接成功
            	<remark>abu 2008-03-06 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.ConnectionManager.ConnectServerError">
            <summary>
            连接服务器失败
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.ConnectionManager.ReceivedKeepAlive">
            <summary>接收到保持连接回复包
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.AdvancedUserInfo">
            <summary>
            级用户信息，这个结果由高级搜索返回
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.AdvancedUserInfo.ReadBean(System.ByteBuffer)">
            <summary>给定一个输入流，解析AdvancedUserInfo结构
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.Card">
            <summary>群名片
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.Card.Read(System.ByteBuffer)">
            <summary>
            从字节缓冲区中解析一个群名片结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.Card.Write(System.ByteBuffer)">
            <summary>
            写入bean的内容到缓冲区中
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.CardStub">
            <summary>
            群名片存根
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.ClusterIM">
             <summary> * 群消息的信息封装bean，具体内容可以参见ReceiveIMPacket
            * 
            * 关于自定义表情的格式，参见NormalIM注释
             	<remark>abu 2008-02-23 </remark>
             </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.ClusterIM.Read(System.ByteBuffer)">
            <summary>给定一个输入流，解析ClusterIM结构
            	<remark>abu 2008-02-23 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.ClusterInfo">
            <summary>
            封装群信息
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.ClusterInfo.#ctor">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.ClusterInfo.ReadTempClusterInfo(System.ByteBuffer)">
            <summary>
            读取临时群信息
            <remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.ClusterInfo.ReadClusterInfo(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析ClusterInfo结构，这个方法适合于得到群信息的回复包
            <remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.ClusterInfo.ReadClusterInfoFromSearchReply(System.ByteBuffer)">
            <summary>
            从搜索群的回复中生成一个ClusterInfo结构
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.ClusterInfo.ClusterId">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ClusterInfo.ExternalId">
            <summary>
            // 如果是固定群，这个表示外部ID，如果是临时群，这个表示父群ID
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ClusterInfo.Type">
            <summary>
            type字段表示固定群或者临时群的群类型
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ClusterInfo.Unknown1">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ClusterInfo.OldCategory">
            <summary>
            2004的群分类
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ClusterInfo.Category">
            <summary>
            2005采用的分类
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.ContactInfo">
            <summary>
            一个用户的详细信息，全部都是字符串形式，按照QQ请求用户信息应答包中的顺序排列，一共37项
            	<remark>abu 2008-02-16 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.QQ_NUM">
            <summary>
            1. QQ号
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.NICK">
            <summary>
            2. 昵称
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.COUNTRY">
            <summary>
            3. 国家
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.PROVINCE">
            <summary>
            4. 省
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.ZIPCODE">
            <summary>
            5. 邮政编码
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.ADDRESS">
            <summary>
            6. 地址
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.TELEPHONE">
            <summary>
            7. 电话
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.AGE">
            <summary>
            8. 年龄
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.GENDER">
            <summary>
            9. 性别
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.NAME">
            <summary>
            10. 姓名
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.EMAIL">
            <summary>
            11. Email
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.PAGER_SN">
            <summary>
            12. 寻呼机sn，（sn是什么玩意，我也不知道）
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.PAGER">
            <summary>
            13. 寻呼机号
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.PAGER_SP">
            <summary>
            14. 寻呼机服务提供商
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.PAGER_BASE_NUM">
            <summary>
            15. 寻呼机base num（也不清楚这是什么）
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.PAGER_TYPE">
            <summary>
            16. 寻呼机类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.OCCUPATION">
            <summary>
            17. 职业
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.HOMEPAGE">
            <summary>
            18. 主页
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.AUTH_TYPE">
            <summary>
            19. 认证类型（应该是被人加自己为好友的时候的认证类型把）
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.UNKNOWN_1">
            <summary>
            20. unknown 1
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.UNKNOWN_2">
            <summary>
            21. unknown 2
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.HEAD">
            <summary>
            22. 头像，头像是用一个数代表的，比如27, 因为QQ目录下的头像是从1开始编号的，
                但是这个头像的数字却是从0开始计数的。并且注意，QQ的目录下面每种头像都
               有3个bmp，所以按数字这么一排，27应该是10-1.bmp
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.MOBILE">
            <summary>
            23. 手机号
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.MOBILE_TYPE">
            <summary>
            24. 手机类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.INTRO">
            <summary>
            25. 介绍
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.CITY">
            <summary>
            26. 城市
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.UNKNOWN_3">
            <summary>
            27. unknown 3
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.UNKNOWN_4">
            <summary>
            28. unknown 4
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.UNKNOWN_5">
            <summary>
            29. unknown 5
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.OPEN_HP">
            <summary>
            30. is_open_hp
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.OPEN_CONTACT">
            <summary>
            31. is_open_contact（通讯方式是否对其他人可见）
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.COLLEGE">
            <summary>
            32. 学校
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.HOROSCOPE">
            <summary>
            33. 星座
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.ZODIAC">
            <summary>
            34. 生肖
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.BLOOD">
            <summary>
            35. 血型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.USER_FLAG">
            <summary>
            36. UserFlag
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.UNKNOWN_6">
            <summary>
            37. unknown 6，总是0x2D
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.ContactInfo.infos">
            <summary>
            原始信息数组
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.ContactInfo.GetInfoArray">
            <summary>
            得到信息字符串数组
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.QQ">
            <summary>
            1. QQ号
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Nick">
            <summary>
            2. 昵称
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Country">
            <summary>
            3. 国家
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Province">
            <summary>
            4. 省
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.ZipCode">
            <summary>
            5. 邮政编码
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Address">
            <summary>
            6. 地址
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Telephone">
            <summary>
            7. 电话
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Age">
            <summary>
            8. 年龄
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Gender">
            <summary>
            9. 性别
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Name">
            <summary>
            10. 姓名
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Email">
            <summary>
            11. Email
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Occupation">
            <summary>
            17. 职业
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.HomePage">
            <summary>
            18. 主页
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.AuthType">
            <summary>
            19. 认证类型（应该是被人加自己为好友的时候的认证类型把）
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Head">
            <summary>
            22. 头像，头像是用一个数代表的，比如27, 因为QQ目录下的头像是从1开始编号的，
                但是这个头像的数字却是从0开始计数的。并且注意，QQ的目录下面每种头像都
                有3个bmp，所以按数字这么一排，27应该是10-1.bmp
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Mobile">
            <summary>
            23. 手机号
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Intro">
            <summary>
            25. 介绍
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.City">
            <summary>
            26. 城市
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.OpenContact">
            <summary>
            31. is_open_contact（通讯方式是否对其他人可见）
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.College">
            <summary>
            32. 学校
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Horoscope">
            <summary>
            33. 星座
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Zodiac">
            <summary>
            34. 生肖
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.Blood">
            <summary>
            35. 血型
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.UserFlag">
            <summary>
            36. UserFlag
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.ContactInfo.FieldCount">
            <summary>
            字段数
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.CustomHead">
            <summary>自定义头像变化信息
            	<remark>abu 2008-02-25 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.DownloadFriendEntry">
            <summary>
            这个Bean用在下载好友分组时
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.DownloadFriendEntry.Read(System.ByteBuffer)">
            <summary>给定一个字节流，解析DownloadFriendEntry结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.DownloadFriendEntry.IsCluster">
            <summary>
            true表示这一项表示一个群 
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.Entities.DownloadFriendEntry.Type">
            <summary>
             好友类型，是好友，还是群
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.DownloadFriendEntry.Group">
            <summary>
            好友所在的组
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.FileTransferArgs">
            <summary>
            传送文件的ip，端口信息封装类
            	<remark>abu 2008-02-23 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.FileTransferArgs.Read(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析FileTransferArgs结构
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.FileTransferArgs.InternetPort">
            <summary>
            发送者外部端口
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FileTransferArgs.MajorPort">
            <summary>
            第一个监听端口
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FileTransferArgs.LocalIP">
            <summary>
            发送者真实ip
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FileTransferArgs.MinorPort">
            <summary>
            第二个监听端口
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.FontStyle">
            <summary>
            字体
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Entities.FontStyle.NONE">
            字体属性 
        </member>
        <member name="M:LumaQQ.NET.Entities.FontStyle.Write(System.ByteBuffer)">
            <summary>
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.FontStyle.Read(System.ByteBuffer)">
            <summary>
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.FontStyle.FontColor">
            <summary>字体颜色
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.FriendLevel">
            <summary>
            好友等级信息数据结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.FriendLevel.Read(System.ByteBuffer)">
            <summary>从缓冲区中读取一个FriendLevel结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.FriendOnlineEntry">
            <summary>
            请求在线好友列表的应答包中包含的数据结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.FriendOnlineEntry.Read(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析FriendOnlineEntry结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendOnlineEntry.Status">
            <summary>
            好友状态
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendOnlineEntry.UserFlag">
            <summary>用户属性标志
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendOnlineEntry.Unknown2">
            <summary>未知
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendOnlineEntry.Unknown3">
            <summary>未知字节
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.FriendRemark">
            <summary>
            存放好友的备注信息
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.FriendStatus">
            <summary>好友状态结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.FriendStatus.Read(System.ByteBuffer)">
            <summary>
             给定一个输入流，解析FriendStatus结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendStatus.IP">
            <summary>
            好友IP
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendStatus.Port">
            <summary>
            好友端口
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendStatus.Status">
            <summary>
            好友状态，定义在QQ接口中
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FriendStatus.UnknownKey">
            <summary>
            未知的密钥，会不会是用来加密和好友通讯的一些信息的，比如点对点通信的时候
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.Member">
            <summary>
            得到群信息中的成员信息
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.Member.IsAdmin">
            <summary>
            是否为管理员
            
            根据Role的值，最好改为枚举
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.Member.IsStockHolder">
            <summary>
            是否为股东
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.NormalIM">
            <summary>
            * 普通消息的本体，其在NormalIMHeader之后
            * 
            * 普通消息中可能内嵌一些图片信息，除了普通的文本之外，图片的信息格式为：
            * 一. 缺省表情，缺省表情的前导字节是0x14，0x14之后的一个字节表示缺省表情的索引值
            * 二. 自定义表情，自定义表情的前导字节是0x15，0x15之后的格式为:
            * 	  1. 存在性字节，如果这个表情第一次出现，则为0x33，如果已经出现过，则为0x34，当为0x33时，后面的内容是
            * 		 i.   扩展名长度，1字节，以'0'为基准，'2'则表示长度为3
            *       ii.  表情图片的文件名，其文件名由md5的字符串形式和扩展名构成，因此这个长度应该是32 + 1 + 3(一般是GIF)
            *       iii. 表情的shortcut长度，以'A'为基准，如果长度是2，则这个字节是'C'
            *       iv.  表情的shortcut
            *    2. 如果为0x34时，则后面的内容为：
            * 		 i.   1字节索引值，假如这个自定义表情出现在第一个位置，则这个字节为'A'   
            *    3. 如果为0x36时，群内自定义表情
            * 		 i. 自定义表情协议块的长度的10进制字符串形式，3字节，不足者前部填为空格，比如为了表示这个自定义表情用了
            *          88个字节，那么这个字段就是" 88"，呵呵，晕吧，注意这个长度是从0x15开始算起，一直到结束。注意这个长度
            *          是字节长度
            *       ii. 表情标识，1字节，标识这个表情是新的，还是已经出现过的，如果是新的，用'e'表示。如果是已经出现过的，
            *           用一个大写字母表示，第一个新表情代号是A，第二个是B，以此类推
            *       iii. 表情的快捷键字节长度，1字节，用一个大写字母表示，比如A表示长度为0，依次类推
            *       iv. 后面的内容开始一直到agent key之前的内容的长度，2字节，用16进制的字符串表示
            *       v. session id的16进制字符串形式，8字节，不足者前面是空格
            *       vi. 中转服务器IP的16进制字符串形式，注意是little-endian，那么ipv4的话自然就是8个字节了
            *       vii. 中转服务器端口号的16进制字符串形式，8个字节
            *       viii. file agent key，16字节
            *       ix. 图片的文件名，文件名的形式是MD5的字符串形式加上点加上后缀名而成，所以一般是36个字节，但是
            *           我想最好还是根据前面的长度减去其他字段的长度来判断好些
            *       x.  快捷键，长度前面已经说了
            *       xi. 一个字节，'A'，可能是用来分界用的
            *    4. 如果为0x37时，群内自定义表情
            *       0x37表示这个表情已经在前面出现过，参见0x36时的格式，0x37缺少0x36的iv, v, vii, viii, ix部分，
            *       其他部分均相同
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.NormalIM.Read(System.ByteBuffer)">
            <summary>给定一个输入流，解析NormalIM结构
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.NormalIM.MessageBytes">
            <summary>消息内容，在解析的时候只用byte[]，正式要显示到界面上时才会转为String，上层程序
             要负责这个事，这个类只负责把内容读入byte[]
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.NormalIMHeader">
            <summary>
            普通消息的头部，普通消息是指从好友或者陌生人那里来的消息。什么不是普通消息？比如系统消息
            * 这个头部跟在ReceiveIMHeader之后
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.NormalIMHeader.Read(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析NormalIMHeader结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.QQFriend">
            <summary>
            好友的信息
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.IsMember">
            <summary>
            true如果好友是会员，否则为false
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.IsBind">
            <summary>
            是否绑定手机
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.IsMobile">
            <summary>是否移动QQ
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.HasCam">
            <summary>
            用户是否有摄像头
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.IsTM">
            <summary>
            用户是否使用TM登录
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.IsGG">
            <summary>
            是否是男性
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.QQFriend.Read(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析QQFriend结构
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.QQFriend.QQ">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.QQFriend.Header">
            <summary>
            头像，参看ContactInfo的头像注释
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.QQFriend.Age">
            <summary>
            年龄
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.QQFriend.Gender">
            <summary>
            性别
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.QQFriend.Nick">
            <summary>
            昵称
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.QQFriend.UserFlag">
            <summary>
            // 用户属性标志
            bit1 => 会员
            bit5 => 移动QQ
            bit6 => 绑定到手机
            bit7 => 是否有摄像头
            bit18 => 是否TM登录
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.QQLive">
            <summary>
            QQLive描述信息 ，找不到StringTokenizer的替代类，暂时还没有实现
            	<remark>abu 2008-02-25 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.QQOrganization">
            <summary>组织信息封装
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.ReceiveIMHeader">
            <summary>
            接收到的消息的头部格式封装类
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.ReceiveIMHeader.Read(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析ReceiveIMHeader结构
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.Signature">
            <summary>个性签名
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.SimpleClusterInfo">
            <summary>
            讨论组信息封装类 
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.SimpleClusterInfo.Read(System.ByteBuffer)">
            <summary>给定一个输入流，解析Subject结构
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.SMS">
            <summary>
            短消息封装类
            	<remark>abu 2008-02-23 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.SMS.ReadBindUserSMS(System.ByteBuffer)">
            <summary>给定一个输入流，解析SMS结构
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.SMS.ReadMobileQQSMS(System.ByteBuffer)">
            <summary>读取移动QQ用户的短信
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.SMS.ReadMobileQQ2SMS(System.ByteBuffer)">
            <summary>读取移动QQ用户消息（通过手机号描述）
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.SMS.ReadMobileSMS(System.ByteBuffer)">
            <summary>读取普通手机的短信
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.SMSReply">
            <summary>单条短信的回复信息，针对一个接受者
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.SMSReply.ReadMobile(System.ByteBuffer)">
            <summary>读取回复信息，接受者类型是手机号码
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Entities.SMSReply.ReadQQ(System.ByteBuffer)">
            <summary>读取回复信息，接受者是一个QQ号
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.SMSReply.IsQQ">
            <summary>true表示接受者是QQ号
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.SMSReply.QQ">
            <summary>仅当isQQ为true时有效
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.SMSReply.Mobile">
            <summary>仅当isQQ为false时有效
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Entities.TempSessionIM">
            <summary> 临时会话消息
            	<remark>abu 2008-02-25 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.TempSessionIM.Read(System.ByteBuffer)">
            <summary>
            	<remark>abu 2008-02-25 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.UserInfo">
            <summary>在线用户的结构表示
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.UserInfo.Read(System.ByteBuffer)">
            <summary>
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Entities.UserProperty">
            <summary>用户属性
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.UserPropertyChange">
            <summary>用户属性变化
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.UserPropertyChange.HasSignature">
            <summary>
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Entities.UserPropertyChange.HasCustomHead">
            <summary>
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="T:LumaQQ.NET.Entities.Weather">
            <summary>天气情况数据
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.IsPreloginPacket(LumaQQ.NET.Packets.InPacket)">
            <summary>判断包是否时登录前可以出现的包，有些包是在登录前可以处理的，如果不是，应该缓存起来等
            到登录成功后再处理，不过但是在实际中观察发现，登录之前收到的东西基本没用，可以不管
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <param name="inPacket">The in packet.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessRequestLoginTokenReply(LumaQQ.NET.Packets.In.RequestLoginTokenReplyPacket,LumaQQ.NET.Packets.Out.RequestLoginTokenPacket)">
            <summary>处理请求登录令牌的回复包
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <param name="basicInPacket">The basic in packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessLoginReply(LumaQQ.NET.Packets.In.LoginReplyPacket,LumaQQ.NET.Packets.Out.LoginPacket)">
            <summary>
            处理登陆应答
            <remark>abu 2008-03-08 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessKeepAliveReply(LumaQQ.NET.Packets.In.KeepAliveReplyPacket,LumaQQ.NET.Packets.Out.KeepAlivePacket)">
            <summary>处理保持登录应答
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessReceiveIM(LumaQQ.NET.Packets.In.ReceiveIMPacket)">
            <summary>
            处理接收信息
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessGetFriendListReply(LumaQQ.NET.Packets.In.GetFriendListReplyPacket,LumaQQ.NET.Packets.Out.GetFriendListPacket)">
            <summary>
            处理得到好友列表应答
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessGetFriendOnlineReply(LumaQQ.NET.Packets.In.GetOnlineOpReplyPacket,LumaQQ.NET.Packets.Out.GetOnlineOpPacket)">
            <summary>
            处理得到在线好友应答
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessGetUserInfoReply(LumaQQ.NET.Packets.In.GetUserInfoReplyPacket,LumaQQ.NET.Packets.Out.GetUserInfoPacket)">
            <summary>processGetUserInfoReply
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessChangeStatusReply(LumaQQ.NET.Packets.In.ChangeStatusReplyPacket,LumaQQ.NET.Packets.Out.ChangeStatusPacket)">
            <summary>处理改变状态回复事件
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessFriendChangeStatus(LumaQQ.NET.Packets.In.FriendChangeStatusPacket)">
            <summary>处理好友状态改变事件
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessSystemNotification(LumaQQ.NET.Packets.In.SystemNotificationPacket)">
            <summary>
            处理系统消息，比如谁谁谁添加你为好友
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessAddFriendExReply(LumaQQ.NET.Packets.In.AddFriendExReplyPacket,LumaQQ.NET.Packets.Out.AddFriendExPacket)">
            <summary>处理请求加一个好友的回复包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessAddFriendAuthReply(LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket,LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket)">
            <summary> 处理认证信息的回复包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessRemoveSelfReply(LumaQQ.NET.Packets.In.RemoveSelfReplyPacket,LumaQQ.NET.Packets.Out.RemoveSelfPacket)">
            <summary>处理删除自己的回复包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessDeleteFriendReply(LumaQQ.NET.Packets.In.DeleteFriendReplyPacket,LumaQQ.NET.Packets.Out.DeleteFriendPacket)">
            <summary>处理删除好友的回复包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessAuthorizeReply(LumaQQ.NET.Packets.In.AuthorizeReplyPacket,LumaQQ.NET.Packets.Out.AuthorizePacket)">
            <summary>处理认证消息发送包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessUploadGroupFriendReply(LumaQQ.NET.Packets.In.UploadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.UploadGroupFriendPacket)">
            <summary>
            Processes the upload group friend reply.处理上传分组好友列表回复包
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessModifyInfoReply(LumaQQ.NET.Packets.In.ModifyInfoReplyPacket,LumaQQ.NET.Packets.Out.ModifyInfoPacket)">
            <summary>处理修改个人信息的回复包
            Processes the modify info reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessSignatureOpReply(LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket)">
            <summary>处理个性签名操作回复包
            Processes the signature op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessPrivacyDataOpReply(LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.Out.PrivacyDataOpPacket)">
            <summary>处理隐私选项操作回复包
            Processes the privacy data op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessFriendDataOpReply(LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket)">
            <summary>处理上传下载备注的回复包
            Processes the friend data op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessFriendLevelOpReply(LumaQQ.NET.Packets.In.FriendLevelOpReplyPacket,LumaQQ.NET.Packets.Out.FriendLevelOpPacket)">
            <summary>处理好友等级回复包
            Processes the friend level op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.PocessUserPropertyOpReply(LumaQQ.NET.Packets.In.UserPropertyOpReplyPacket,LumaQQ.NET.Packets.Out.UserPropertyOpPacket)">
            <summary>处理用户属性回复包
            Pocesses the user property op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessDownloadGroupFriendReply(LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.DownloadGroupFriendPacket)">
            <summary>处理下载分组好友列表回复包
            Processes the download group friend reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessGroupNameOpReply(LumaQQ.NET.Packets.In.GroupDataOpReplyPacket,LumaQQ.NET.Packets.Out.GroupDataOpPacket)">
            <summary>处理分组名称回复包
            Processes the group name op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessSearchUserReply(LumaQQ.NET.Packets.In.SearchUserReplyPacket,LumaQQ.NET.Packets.Out.SearchUserPacket)">
            <summary>处理搜索用户的回复包
            Processes the search user reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Events.BasicFamilyProcessor.ProcessWeatherOpReply(LumaQQ.NET.Packets.In.WeatherOpReplyPacket,LumaQQ.NET.Packets.Out.WeatherOpPacket)">
            <summary>处理天气预报操作回复包
            Processes the weather op reply.
            </summary>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="T:LumaQQ.NET.Events.QQEventArgs`2">
            <summary>
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <typeparam name="I"></typeparam>
            <typeparam name="O"></typeparam>
        </member>
        <member name="M:LumaQQ.NET.Events.QQEventArgs`2.#ctor(LumaQQ.NET.QQClient,`0,`1)">
            <summary>
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="client">The client.</param>
            <param name="inPacket">The in packet.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="P:LumaQQ.NET.Events.QQEventArgs`2.InPacket">
            <summary>回复包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Events.QQEventArgs`2.OutPacket">
            <summary>对应的发送包
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Events.QQEventArgs`2.QQClient">
            <summary>
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.FriendInfo">
            <summary>
            QQ好友信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.FriendInfo.#ctor(LumaQQ.NET.Entities.QQFriend)">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="basicInfo">The basic info.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendInfo.GetStatu">
            <summary>
            用户是否在线
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.FriendInfo.BasicInfo">
            <summary>
            好友的基本信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.FriendInfo.Status">
            <summary>
            好的状态信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="M:LumaQQ.NET.FriendList.SetFriendOnline(System.Int32,LumaQQ.NET.Entities.FriendOnlineEntry)">
            <summary>设置好友为上线状态
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="qq">The qq.</param>
            <param name="onlineEntry">The online entry.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendList.SetFriendOffline(System.Int32)">
            <summary>设置好友为离线状态
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="P:LumaQQ.NET.FriendList.Onlines">
            <summary>
            在线好友数量
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.FriendManager">
            <summary>
            好友管理
            <remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.FriendManager"/> class.
            </summary>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.#ctor(LumaQQ.NET.QQClient)">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.FriendManager"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.SearchUser(System.Int32)">
            <summary>搜索所有的在线用户
            Searches the user.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.SearchUser(System.Int32,System.String,System.String,System.String)">
            <summary>自定义搜索用户
            Searches the user.
            </summary>
            <param name="page">The page.</param>
            <param name="qq">The qq.</param>
            <param name="nick">The nick.</param>
            <param name="email">The email.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.DownloadGroupFriends(System.Int32)">
            <summary>下载好友分组
            Downloads the group friend.
            </summary>
            <param name="beginFrom">The begin from.起始好友号 如果是第一个包，起始好友号为0</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.UploadGroupName(System.Collections.Generic.List{System.String})">
            <summary>上传分组名称
            Uploads the group.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.DownloadGroupName">
            <summary>下载分组名称
            Downloads the group.
            </summary>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetUserProperty(System.UInt16)">
            <summary>得到用户属性
            Gets the user property.
            </summary>
            <param name="startPosition">The start position.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetFriendLevel(System.Collections.Generic.List{System.Int32})">
            <summary>得到好友等级
            Gets the friend level.
            </summary>
            <param name="friends">The friends.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetSignature(System.Int32)">
            <summary>根据QQ号码读取个性签名
            Gets the signature.
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetSignature(System.Collections.Generic.List{LumaQQ.NET.Entities.Signature})">
            <summary>读取个性签名
            <remarks>在得到好友的个性签名时，QQ的做法是对所有的QQ号排个序，每次最多请求33个</remarks>
            Gets the signature.
            </summary>
            <param name="sigs">The sigs.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.DownloadFriendRemark(System.Int32)">
            <summary>下载好友备注信息
            Downloads the friend remark.
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.BatchDownloadFriendRemark(System.Int32)">
            <summary>批量下载好友备注信息
            Batches the download friend remark.
            </summary>
            <param name="page">The page.页号</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.UploadFriendRemark(System.Int32,LumaQQ.NET.Entities.FriendRemark)">
            <summary>上传好友备信息
            Uploads the friend remark.
            </summary>
            <param name="qq">The qq.</param>
            <param name="remark">The remark.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.RemoveFriendFromList(System.Int32)">
            <summary> 把好友从服务器端的好友列表中删除
            Removes the friend from list.
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.AddFriendToList(System.Int32,System.Int32)">
            <summary>
            添加好友到服务器端的好友列表中
            </summary>
            <param name="group">The group.好友的组号，我的好友组是0，然后是1，2，...</param>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.AddFriend(System.Int32)">
            <summary>添加一个好友
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.DeleteFriend(System.Int32)">
            <summary>删除一个好友
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.RemoveSelfFrom(System.Int32)">
            <summary> 把某人的好友列表中的自己删除
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.SendAddFriendAuth(System.Int32,System.String)">
            <summary> 如果要加的人需要认证，用这个方法发送验证请求
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="qq">The qq.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.ChangeStatus(LumaQQ.NET.QQStatus,System.Boolean)">
            <summary>改变自身状态
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="status">The status.</param>
            <param name="showFakeCam">if set to <c>true</c> [show fake cam].</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.ApprovedAddMe(System.Int32)">
            <summary>如果我要同意一个人加我为好友的请求，用这个方法发送同意消息
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.RejectAddMe(System.Int32,System.String)">
            <summary>如果我要拒绝一个人加我为好友的请求，用这个方法发送拒绝消息
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <param name="qq">The qq.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetUserInfo(System.Int32)">
            <summary>得到一个用户的详细信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="qq">The qq.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetOnlineFriend">
            <summary>请求在线好友列表
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetOnlineFriend(System.Int32)">
            <summary>请求在线好友列表
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="startPosition">The start position.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetFriendList">
            <summary>请求取得好友名单
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.GetFriendList(System.Int32)">
            <summary>请求取得好友名单
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnSearchUserSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SearchUserReplyPacket,LumaQQ.NET.Packets.Out.SearchUserPacket})">
            <summary>
            Raises the <see cref="E:SearchUserSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SearchUserReplyPacket,LumaQQ.NET.Packets.Out.SearchUserPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnUploadGroupNamesSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.GroupDataOpReplyPacket,LumaQQ.NET.Packets.Out.GroupDataOpPacket})">
            <summary>
            Raises the <see cref="E:UploadGroupNamesSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.GroupDataOpReplyPacket,LumaQQ.NET.Packets.Out.GroupDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDownloadGroupNamesSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.GroupDataOpReplyPacket,LumaQQ.NET.Packets.Out.GroupDataOpPacket})">
            <summary>
            Raises the <see cref="E:DownloadGroupNamesSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.GroupDataOpReplyPacket,LumaQQ.NET.Packets.Out.GroupDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDownloadGroupFriendSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.DownloadGroupFriendPacket})">
            <summary>
            Raises the <see cref="E:DownloadGroupFriendSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.DownloadGroupFriendPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDownloadGroupFriendFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.DownloadGroupFriendPacket})">
            <summary>
            Raises the <see cref="E:DownloadGroupFriendFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.DownloadGroupFriendPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetUserPropertySuccess(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.UserPropertyOpReplyPacket,LumaQQ.NET.Packets.Out.UserPropertyOpPacket})">
            <summary>
            Raises the <see cref="E:GetUserPropertySuccess"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.UserPropertyOpReplyPacket,LumaQQ.NET.Packets.Out.UserPropertyOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetFriendLevelSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendLevelOpReplyPacket,LumaQQ.NET.Packets.Out.FriendLevelOpPacket})">
            <summary>
            Raises the <see cref="E:GetFriendLevelSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendLevelOpReplyPacket,LumaQQ.NET.Packets.Out.FriendLevelOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetSignatureSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket})">
            <summary>
            Raises the <see cref="E:GetSignatureSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetSignatureFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket})">
            <summary>
            Raises the <see cref="E:GetSignatureFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnUploadFriendRemarkSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:UploadFriendRemarkSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnUploadFriendRemarkFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:UploadFriendRemarkFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDownloadFriendRemarkSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:DownloadFriendRemarkSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDownloadFriendRemarkFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:DownloadFriendRemarkFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnBatchDownloadFriendRemarkSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:BatchDownloadFriendRemarkSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnBatchDownloadFriendRemarkFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:BatchDownloadFriendRemarkFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnRemoveFriendFromListSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:RemoveFriendFromListSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnRemoveFriendFromListFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket})">
            <summary>
            Raises the <see cref="E:RemoveFriendFromListFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendDataOpReplyPacket,LumaQQ.NET.Packets.Out.FriendDataOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetOnlineFriendSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.GetOnlineOpReplyPacket,LumaQQ.NET.Packets.Out.GetOnlineOpPacket})">
            <summary>
            Called when [get online friend successed].
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetFriendListSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.GetFriendListReplyPacket,LumaQQ.NET.Packets.Out.GetFriendListPacket})">
            <summary>
            Raises the <see cref="E:GetFriendListSuccess"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.GetFriendListReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnGetUserInfoSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.GetUserInfoReplyPacket,LumaQQ.NET.Packets.Out.GetUserInfoPacket})">
            <summary>
            Raises the <see cref="E:GetUserInfoSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.GetUserInfoReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnFriendChangeStatus(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.FriendChangeStatusPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:FriendChangeStatus"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.FriendChangeStatusPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnChangeStatusSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ChangeStatusReplyPacket,LumaQQ.NET.Packets.Out.ChangeStatusPacket})">
            <summary>
            Raises the <see cref="E:ChangeStatusSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ChangeStatusReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnChangeStatusFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ChangeStatusReplyPacket,LumaQQ.NET.Packets.Out.ChangeStatusPacket})">
            <summary>
            Raises the <see cref="E:ChangeStatusFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ChangeStatusReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnAddFriendSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendExReplyPacket,LumaQQ.NET.Packets.Out.AddFriendExPacket})">
            <summary>
            Raises the <see cref="E:AddFriendSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendExReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnAddFriendNeedAuth(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendExReplyPacket,LumaQQ.NET.Packets.Out.AddFriendExPacket})">
            <summary>
            Raises the <see cref="E:AddFriendNeedAuth"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendExReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnAddFriendDeny(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendExReplyPacket,LumaQQ.NET.Packets.Out.AddFriendExPacket})">
            <summary>
            Raises the <see cref="E:AddFriendDeny"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendExReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnFriendAlready(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendExReplyPacket,LumaQQ.NET.Packets.Out.AddFriendExPacket})">
            <summary>
            Raises the <see cref="E:FriendAlready"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendExReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnAddFriendFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendExReplyPacket,LumaQQ.NET.Packets.Out.AddFriendExPacket})">
            <summary>
            Raises the <see cref="E:AddFriendFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendExReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnSendAuthSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AuthorizeReplyPacket,LumaQQ.NET.Packets.Out.AuthorizePacket})">
            <summary>
            Raises the <see cref="E:SendAuthSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnSendAuthFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AuthorizeReplyPacket,LumaQQ.NET.Packets.Out.AuthorizePacket})">
            <summary>
            Raises the <see cref="E:SendAuthFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnRemoveSelfSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.RemoveSelfReplyPacket,LumaQQ.NET.Packets.Out.RemoveSelfPacket})">
            <summary>
            Raises the <see cref="E:RemoveSelfSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.RemoveSelfReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnRemoveSelfFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.RemoveSelfReplyPacket,LumaQQ.NET.Packets.Out.RemoveSelfPacket})">
            <summary>
            Raises the <see cref="E:RemoveSelfFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.RemoveSelfReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDeleteFriendSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.DeleteFriendReplyPacket,LumaQQ.NET.Packets.Out.DeleteFriendPacket})">
            <summary>
            Raises the <see cref="E:DeleteFriendSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.DeleteFriendReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnDeleteFriendFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.DeleteFriendReplyPacket,LumaQQ.NET.Packets.Out.DeleteFriendPacket})">
            <summary>
            Raises the <see cref="E:DeleteFriendFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.DeleteFriendReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnResponseAuthSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket,LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket})">
            <summary>
            Raises the <see cref="E:ResponseAuthSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnResponseAuthFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket,LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket})">
            <summary>
            Raises the <see cref="E:ResponseAuthFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnUploadGroupFriendSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.UploadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.UploadGroupFriendPacket})">
            <summary>
            Raises the <see cref="E:UploadGroupFriendSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.UploadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.UploadGroupFriendPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnUploadGroupFriendFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.UploadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.UploadGroupFriendPacket})">
            <summary>
            Raises the <see cref="E:UploadGroupFriendFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.UploadGroupFriendReplyPacket,LumaQQ.NET.Packets.Out.UploadGroupFriendPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnSignatureChanged(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SignatureChanged"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.FriendManager.OnUserPropertyChanged(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:UserPropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:LumaQQ.NET.FriendManager.QQClient">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.FriendManager.QQUser">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.SearchUserSuccessed">
            <summary>搜索好友回复事件
            Occurs when [search user successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UploadGroupNamesSuccessed">
            <summary>上传分组名称成功
            Occurs when [upload group names successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UploadGroupNamesFailed">
            <summary>上传分组名称失败
            Occurs when [upload group names failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DownloadGroupNamesSuccessed">
            <summary>下载分组名称成功
            Occurs when [download group names successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DownloadGroupNamesFailed">
            <summary>下载分名称失败
            Occurs when [download group names failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DownloadGroupFriendSuccessed">
            <summary>下载分组好友成功
            Occurs when [download group friend successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DownloadGroupFriendFailed">
            <summary>下载分组好友失败
            Occurs when [download group friend failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetUserPropertySuccessed">
            <summary>读取用户属性成功
            Occurs when [get user property successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetFriendLevelSuccessed">
            <summary>读取好友等级成功
            Occurs when [get friend level successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetSignatureSuccessed">
            <summary>读取个性签名成功
            Occurs when [get signature successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetSignatureFailed">
            <summary>读取个性签名失败
            Occurs when [get signature failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UploadFriendRemarkSuccessed">
            <summary>上传好友备注信息成功
            Occurs when [upload friend remark successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UploadFriendRemarkFailed">
            <summary>上传好友备注信息失败
            Occurs when [upload friend remark failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DownloadFriendRemarkSuccessed">
            <summary>下载好友备注信息成功
            Occurs when [download friend remark successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DownloadFriendRemarkFailed">
            <summary>下载好友备注信息失败
            Occurs when [download friend remark failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.BatchDownloadFriendRemarkSuccessed">
            <summary>成批下载好友信息成功
            Occurs when [batch download friend remark successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.BatchDownloadFriendRemarkFailed">
            <summary>成批下载好友信息失败
            Occurs when [batch download friend remark failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.RemoveFriendFromListSuccessed">
            <summary>从服务器端好友列表中移除好友成功
            Occurs when [remove friend from list successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.RemoveFriendFromListFailed">
            <summary>从服务器端好友列表中移除好友失败
            Occurs when [remove friend from list failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetOnlineFriendSuccessed">
            <summary>取得在线好友列表
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetFriendListSuccessed">
            <summary>得到好友列表事件
            <remarks>获得好友列表及在线状态的顺序是：
            先得到所有的好友列表，根据TheEnd判断是否已经得到所有的好友。
            得到所有的好友列表后，才能去获取在线好友列表。</remarks>
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.GetUserInfoSuccessed">
            <summary>得到用户详细信息回复事件 
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.FriendChangeStatus">
            <summary>收到好友的状态发生变化
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.ChangeStatusSuccessed">
            <summary>改变自身状态成功
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.ChangeStatusFailed">
            <summary>
            改变自身状态失败
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.AddFriendSuccessed">
            <summary>好友添加成功
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.AddFriendNeedAuth">
            <summary>
            添加好友时，需要发送验证信息
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.AddFriendDeny">
            <summary>
            对方拒绝让你加为好友
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.FriendAlready">
            <summary>对方已经是好友
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.AddFriendFailed">
            <summary>添加好友失败
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.SendAuthSuccessed">
            <summary>认证信息发送成功
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.SendAuthFailed">
            <summary>发送认证信息失败
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.RemoveSelfSuccessed">
            <summary>把自己从好友的好友列表中删除成功
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.RemoveSelfFailed">
            <summary>把自己从好友的好友列表中删除失败
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DeleteFriendSuccessed">
            <summary>删除好友成功
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.DeleteFriendFailed">
            <summary>删除好友失败
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.ResponseAuthSuccessed">
            <summary>处理认证信息成功
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.ResponseAuthFailed">
            <summary>处理认证信息失败
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UploadGroupFriendSuccessed">
            <summary>
            Occurs when [upload group friend successed].事件在上传分组中的好友列表成功时发生
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UploadGroupFriendFailed">
            <summary>
            Occurs when [upload group friend failed].事件在下载分组中的好友列表成功时发生
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.SignatureChanged">
            <summary>
            好友个性签名改变
            	<remark>abu 2008-03-15 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.FriendManager.UserPropertyChanged">
            <summary>
            收到好友属性变化通知
            	<remark>abu 2008-03-15 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.LoginManager">
            <summary>
            登录管理
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.Login">
            <summary>
            登录
            	<remark>abu 2008-03-06 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.LoginUser">
            <summary>在成功获取登录令牌后向服务器发送用户名密码
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.Logout">
            <summary>
            退出登录
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.SetLogout">
            <summary>
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.OnRequestLoginTokenSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.RequestLoginTokenReplyPacket,LumaQQ.NET.Packets.Out.RequestLoginTokenPacket})">
            <summary>
            Raises the <see cref="E:RequestLoginTokenSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.RequestLoginTokenReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.OnRequestLoginTokenFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.RequestLoginTokenReplyPacket,LumaQQ.NET.Packets.Out.RequestLoginTokenPacket})">
            <summary>
            Raises the <see cref="E:RequestLoginTokenFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.RequestLoginTokenReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.OnLoginSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.LoginReplyPacket,LumaQQ.NET.Packets.Out.LoginPacket})">
            <summary>
            Raises the <see cref="E:LoginSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.LoginReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.OnLoginRedirectNull(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.LoginReplyPacket,LumaQQ.NET.Packets.Out.LoginPacket})">
            <summary>
            Raises the <see cref="E:LoginRedirectNull"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.LoginReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.OnLoginFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.LoginReplyPacket,LumaQQ.NET.Packets.Out.LoginPacket})">
            <summary>
            Raises the <see cref="E:LoginFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.LoginReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.LoginManager.OnLoginUnknownError(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.LoginReplyPacket,LumaQQ.NET.Packets.Out.LoginPacket})">
            <summary>
            Raises the <see cref="E:LoginUnknownError"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.LoginReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:LumaQQ.NET.LoginManager.QQClient">
            <summary>
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <value></value>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.RequestLoginTokenSuccessed">
            <summary>
            请求登录令牌成功
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.RequestLoginTokenFailed">
            <summary>
            请求登录令牌失败
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.LoginSuccessed">
            <summary>登录成功事件
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.LoginRedirect">
            <summary>
            登录重定向事件
            </summary>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.LoginRedirectNull">
            <summary>
            重定向登录时，重定向服务器为空
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.LoginFailed">
            <summary>
            登录失败触发的事件
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.LoginManager.LoginUnknownError">
            <summary>
            登录过程中的未知错误
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.MessageManager">
            <summary>
            信息管理
            <remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.#ctor(LumaQQ.NET.QQClient)">
            <summary>
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.SendIM(System.Int32,System.String)">
            <summary>发送普通信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.SendIM(System.Int32,System.String,LumaQQ.NET.Entities.FontStyle)">
            <summary>
            发送普通信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
            <param name="fontSytle">The font sytle.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.SendIM(System.Int32,System.String,System.Int32,System.Int32,LumaQQ.NET.Entities.FontStyle)">
            <summary>
            发送普通信息
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
            <param name="totalFragments">The total fragments.总分块数</param>
            <param name="fragementSequence">The fragement sequence.当前当块序号</param>
            <param name="fontSytle">The font sytle.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.SendTempIM(System.Int32,System.String,System.String)">
            <summary>发送临时信息
            Sends the temp IM.
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
            <param name="myNick">My nick.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.SendTempIM(System.Int32,System.String,System.String,LumaQQ.NET.Entities.FontStyle)">
            <summary>
            发送临时信息
            <remark>abu 2008-03-11 </remark>
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
            <param name="myNick">My nick.你的昵称</param>
            <param name="fontSytle">The font sytle.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.SendReceiveReplyPacket(LumaQQ.NET.Packets.In.ReceiveIMPacket)">
            <summary>发送接收信息回复包
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="imPacket">The im packet.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnReceiveDuplicatedIM(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceiveDuplicatedIM"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnReceiveNormalIM(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceiveNormalIM"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnReceiveUnknownIM(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceiveUnknownIM"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnReceiveKickOut(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceiveKickOut"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnReceiveSysMessage(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceiveSysMessage"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysAddedByOthers(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysAddedByOthers"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnAddedByOthersEx(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:AddedByOthersEx"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysRequestAddMe(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysRequestAddMe"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysRequestAddMeEx(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysRequestAddMeEx"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysAddOtherApproved(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysAddOtherApproved"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysAddOtherRejected(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysAddOtherRejected"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysAdvertisment(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysAdvertisment"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnSysApprovedAddOtherAndAddMe(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SystemNotificationPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SysApprovedAddOtherAndAddMe"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SystemNotificationPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.MessageManager.OnReceiveTempSessionIM(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceiveTempSessionIM"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ReceiveIMPacket,LumaQQ.NET.Packets.OutPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:LumaQQ.NET.MessageManager.QQClient">
            <summary>
            Gets or sets the QQ client.
            </summary>
            <value>The QQ client.</value>
        </member>
        <member name="P:LumaQQ.NET.MessageManager.QQUser">
            <summary>
            Gets the QQ user.
            </summary>
            <value>The QQ user.</value>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.ReceiveDuplicatedIM">
            <summary>
            收到一条重复信息
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.ReceiveNormalIM">
            <summary>
            收到一条普通信息
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.ReceiveUnknownIM">
            <summary>收到一条未知类型的信息，暂时无法处理
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.ReceiveKickOut">
            <summary>事件在收到你的QQ号在其他地方登陆导致你被系统踢出时发生，
            * source是SystemNotificationPacket。系统通知和系统消息是不同的两种事件，系统通知是对你一个人发
            * 出的（或者是和你相关的），系统消息是一种广播式的，每个人都会收到，要分清楚这两种事件。此外
            * 系统通知的载体是SystemNotificationPacket，而系统消息是ReceiveIMPacket，ReceiveIMPacket的功
            * 能和格式很多。这也是一个区别。注意其后的我被其他人加为好友，验证被通过被拒绝等等，都是系统
            * 通知范畴
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.ReceiveSysMessage">
            <summary>
            收到系统消息
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysAddedByOthers">
            <summary>事件发生在有人将我加为好友时
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysAddedByOthersEx">
            <summary> 事件发生在有人将我加为好友时
            当对方使用0x00A8命令
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysRequestAddMe">
            <summary>事件发生在有人请求加我为好友时，SysAddedByOthers是我没有设置验证
            是发生的，这个事件是我如果设了验证时发生的，两者不会都发生。
            当对方不使用0x00A8命令发送认证消息，才会收到此系统通知
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysRequestAddMeEx">
            <summary>事件发生在有人请求加我为好友时
            这是SysRequestAddMe的扩展事件，在2005中使用 当对方使用0x00A8命令发送认证消息，才会收到此系统通知
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysAddOtherApproved">
            <summary>事件发生在我请求加一个人，
            那个人同意我加的时候 
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysAddOtherRejected">
            <summary> 事件发生在我请求加一个人，那个人拒绝时
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysAdvertisment">
            <summary>广告
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.SysApprovedAddOtherAndAddMe">
            <summary>对方同意加你为好友，并且把你加为好友
            	<remark>abu 2008-03-12 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.MessageManager.ReceiveTempSessionIM">
            <summary>
            收到一条临时会话信息
            	<remark>abu 2008-03-15 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Net.ConnectionPolicy">
            <summary>
            连接策略
            	<remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.ConnectionPolicy.OnNetworkError(System.Exception)">
            <summary>
            一般网络错误时
            Called when [exception].
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.ConnectionPolicy.OnConnected">
            <summary>
            连接服务器成功后
            Called when [connected].
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.ConnectionPolicy.CreateErrorPacket(LumaQQ.NET.Packets.ErrorPacketType,System.String,System.Exception)">
            <summary>
            创建一个错误包
            	<remark>abu 2008-03-06 </remark>
            </summary>
            <param name="errorCode">The error code.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.ConnectionPolicy.PushResend(LumaQQ.NET.Packets.OutPacket,System.String)">
            <summary>压入一个重发包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.ConnectionPolicy.ParseIn(System.ByteBuffer)">
            <summary>
            解析输入包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.Net.ConnectionPolicy.ID">
            <summary>连接ID
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Net.ConnectionPolicy.Proxy">
            <summary>
            使用的代理信息
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnection.Send(LumaQQ.NET.Packets.OutPacket,System.Boolean)">
            <summary>
            添加一个输出包
            <remark>abu 2008-03-03 </remark>
            </summary>
            <param name="outPacket">The out packet.</param>
            <param name="monitor">if set to <c>true</c> [monitor].true为同步发送，false为异步发送</param>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnection.ClearSendQueue">
            <summary>
            清空输出队列
            	<remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnection.Connect">
            <summary>
            连接到服务器
            	<remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnection.Close">
            <summary>
            关闭连接
            	<remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Net.IConnection.Policy">
            <summary>
            
            	<remark>abu 2008-03-03 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Net.IConnection.IsConnected">
            <summary>
            是否处于连接状态
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Net.IConnection.Name">
            <summary>连接名称
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Net.IConnectionPool">
            <summary>
            连接池接口，用于管理所有连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.Flush">
            <summary>立刻发送所有包
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.Start">
            <summary>启动连接池
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.Release(LumaQQ.NET.Net.IConnection)">
            <summary>
            释放连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.Release(System.String)">
            <summary>
            释放指定id的连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.Send(System.String,LumaQQ.NET.Packets.OutPacket,System.Boolean)">
            <summary>
            发送一个包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="id">The id.</param>
            <param name="packet">The packet.</param>
            <param name="keepSent">if set to <c>true</c> [keep sent].</param>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.NewUDPConnection(LumaQQ.NET.Net.ConnectionPolicy,System.Net.EndPoint,System.Boolean)">
            <summary>新建一个UDP连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="policy">The policy.</param>
            <param name="server">The server.</param>
            <param name="start">if set to <c>true</c> [start].</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.NewTCPConnection(LumaQQ.NET.Net.ConnectionPolicy,System.Net.EndPoint,System.Boolean)">
            <summary>新建一个TCP连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="policy">The policy.</param>
            <param name="server">The server.</param>
            <param name="start">if set to <c>true</c> [start].</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.GetConnection(System.String)">
            <summary>根据id得到连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.GetConnection(System.Net.EndPoint)">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="server">The server.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.Dispose">
            <summary>关闭这个连接池，释放所有资源。一个释放掉的连接池不可继续使用，必须新建一个新的连接池对象
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.HasConnection(System.String)">
            <summary>检测是否存在某个id的连接
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.IConnectionPool.GetConnections">
            <summary>连接对象列表
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod">
            <summary>
            Implements a SOCKS authentication scheme.
            </summary>
            <remarks>This is an abstract class; it must be inherited.</remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthMethod instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.CallBack">
            <summary>Holds the address of the method to call when the proxy has authenticated the client.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>The socket connection with the proxy server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Buffer">
            <summary>
            Gets or sets a byt array that can be used to store data.
            </summary>
            <value>A byte array to store data.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone">
            <summary>
            This class implements the 'No Authentication' scheme.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthNone instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <remarks>This method immediately calls the callback method.</remarks>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass">
            <summary>
            This class implements the 'username/password authentication' scheme.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new AuthUserPass instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.GetAuthenticationBytes">
            <summary>
            Creates an array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.
            </summary>
            <returns>An array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Authenticate">
            <summary>
            Starts the authentication process.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Starts the asynchronous authentication process.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.OnSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket received an authentication reply.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>The username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Password">
            <summary>
            Gets or sets the password to use when authenticating with the proxy server.
            </summary>
            <value>The password to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult">
            <summary>
            A class that implements the IAsyncResult interface. Objects from this class are returned by the BeginConnect method of the ProxySocket class.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.Init(System.Object)">
            <summary>Initializes the internal variables of this object</summary>
            <param name="stateObject">An object that contains state information for this request.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.Reset">
            <summary>Initializes the internal variables of this object</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_Completed">
            <summary>Used internally to represent the state of the asynchronous request</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_StateObject">
            <summary>Holds the value of the StateObject property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.IsCompleted">
            <summary>Gets a value that indicates whether the server has completed processing the call. It is illegal for the server to use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to "true". Thus, it is safe for the client to destroy the resources after IsCompleted property returns "true".</summary>
            <value>A boolean that indicates whether the server has completed processing the call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the BeginXXXX call has been completed synchronously. If this is detected in the AsyncCallback delegate, it is probable that the thread that called BeginInvoke is the current thread.</summary>
            <value>Returns false.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.AsyncState">
            <summary>Gets an object that was passed as the state parameter of the BeginXXXX method call.</summary>
            <value>The object that was passed as the state parameter of the BeginXXXX method call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.AsyncWaitHandle">
             <summary>
             The AsyncWaitHandle property returns the WaitHandle that can use to perform a WaitHandle.WaitOne or WaitAny or WaitAll. The object which implements IAsyncResult need not derive from the System.WaitHandle classes directly. The WaitHandle wraps its underlying synchronization primitive and should be signaled after the call is completed. This enables the client to wait for the call to complete instead polling. The Runtime supplies a number of waitable objects that mirror Win32 synchronization primitives e.g. ManualResetEvent, AutoResetEvent and Mutex.
             WaitHandle supplies methods that support waiting for such synchronization objects to become signaled with "any" or "all" semantics i.e. WaitHandle.WaitOne, WaitAny and WaitAll. Such methods are context aware to avoid deadlocks. The AsyncWaitHandle can be allocated eagerly or on demand. It is the choice of the IAsyncResult implementer.
            </summary>
             <value>The WaitHandle associated with this asynchronous result.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxyException">
            <summary>
            The exception that is thrown when a proxy error occurs.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.Socks5ToString(System.Int32)">
            <summary>
            Converts a SOCKS5 error number to a human readable string.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
            <returns>A string representation of the specified SOCKS5 error number.</returns>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxyTypes">
            <summary>
            Specifies the type of proxy servers that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.None">
            <summary>No proxy server; the ProxySocket object behaves exactly like an ordinary Socket object.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.Socks4">
            <summary>A SOCKS4[A] proxy server.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxySocket">
            <summary>
            Implements a Socket class that can connect trough a SOCKS proxy server.
            </summary>
            <remarks>This class implements SOCKS4[A] and SOCKS5.<br>It does not, however, implement the BIND commands, so you cannot .</br></remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <param name="proxyPassword">The password to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> -or- <c>proxyPassword</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">An error Occurred while talking to the proxy server.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="host">The remote host to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">An error Occurred while talking to the proxy server.</exception>
            <remarks>If you use this method with a SOCKS4 server, it will let the server resolve the hostname. Not all SOCKS4 servers support this 'remote DNS' though.</remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port on the remote host to connect to.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException">The asyncResult parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The asyncResult parameter was not returned by a call to the BeginConnect method.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy server refused the connection.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginDns(System.String,Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Begins an asynchronous request to resolve a DNS host name or IP address in dotted-quad notation to an IPAddress instance.
            </summary>
            <param name="host">The host to resolve.</param>
            <param name="callback">The method to call when the hostname has been resolved.</param>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while trying to resolve the host.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnResolved(System.IAsyncResult)">
            <summary>
            Called when the specified hostname has been resolved.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote host.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnHandShakeComplete(System.Exception)">
            <summary>
            Called when the Socket has finished talking to the proxy server and is ready to relay data.
            </summary>
            <param name="error">The error to throw when the EndConnect method is called.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_State">
            <summary>Holds the value of the State property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyEndPoint">
            <summary>Holds the value of the ProxyEndPoint property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyType">
            <summary>Holds the value of the ProxyType property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyUser">
            <summary>Holds the value of the ProxyUser property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyPass">
            <summary>Holds the value of the ProxyPass property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.CallBack">
            <summary>Holds a pointer to the method that should be called when the Socket is connected to the remote device.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ToThrow">
            <summary>Holds the value of the ToThrow property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_RemotePort">
            <summary>Holds the value of the RemotePort property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyEndPoint">
            <summary>
            Gets or sets the EndPoint of the proxy server.
            </summary>
            <value>An IPEndPoint object that holds the IP address and the port of the proxy server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyType">
            <summary>
            Gets or sets the type of proxy server to use.
            </summary>
            <value>One of the ProxyTypes values.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.State">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>The user-defined object.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyUser">
            <summary>
            Gets or sets the username to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the username that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyPass">
            <summary>
            Gets or sets the password to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the password that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.AsyncResult">
            <summary>
            Gets or sets the asynchronous result object.
            </summary>
            <value>An instance of the IAsyncProxyResult class.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ToThrow">
            <summary>
            Gets or sets the exception to throw when the EndConnect method is called.
            </summary>
            <value>An instance of the Exception class (or subclasses of Exception).</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.RemotePort">
            <summary>
            Gets or sets the remote port the user wants to connect to.
            </summary>
            <value>An integer that specifies the port the user wants to connect to.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Socks4Handler">
            <summary>
            Implements the SOCKS4[A] protocol.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.SocksHandler">
            <summary>
            Implements a specific version of the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.PortToBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port to convert.</param>
            <returns>An array of two bytes that represents the specified port.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.AddressToBytes(System.Int64)">
            <summary>
            Converts an IP address to an array of bytes.
            </summary>
            <param name="address">The IP address to convert.</param>
            <returns>An array of four bytes that represents the specified IP address.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.ReadBytes(System.Int32)">
            <summary>
            Reads a specified number of bytes from the Server socket.
            </summary>
            <param name="count">The number of bytes to return.</param>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ArgumentException">The number of bytes to read is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.ProtocolComplete">
            <summary>Holds the address of the method to call when the SOCKS protocol has been completed.</summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">The remote endpoint to connect to.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device. </param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>A Socket object that represents the connection with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>A string that holds the username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.AsyncResult">
            <summary>
            Gets or sets the return value of the BeginConnect call.
            </summary>
            <value>An IAsyncProxyResult object that is the return value of the BeginConnect call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Buffer">
            <summary>
            Gets or sets a byte buffer.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <remarks>Resolving the host name will be done at server side. Do note that some SOCKS4 servers do not implement this functionality.</remarks>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Socks5Handler">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Authenticate">
            <summary>
            Starts the synchronous authentication process.
            </summary>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> or <c>host</c> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthReceive(System.IAsyncResult)">
            <summary>
            Called when an authentication reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthenticated(System.Exception)">
            <summary>
            Called when the socket has been successfully authenticated with the server.
            </summary>
            <param name="e">The exception that has Occurred while authenticating, or <em>null</em> if no error Occurred.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the connection request has been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when a connection reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.ProcessReply(System.Byte[])">
            <summary>
            Processes the received reply.
            </summary>
            <param name="buffer">The received reply</param>
            <exception cref="T:System.Net.ProtocolViolationException">The received reply is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnReadLast(System.IAsyncResult)">
            <summary>
            Called when the last bytes are read from the socket.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Socks5Handler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Socks5Handler.m_HandShake">
            <summary>Holds the value of the HandShake property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Socks5Handler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the SOCKS5 server.
            </summary>
            <value>The password to use when authenticating with the SOCKS5 server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Socks5Handler.HandShake">
            <summary>
            Gets or sets the bytes to use when sending a connect request to the proxy server.
            </summary>
            <value>The array of bytes to use when sending a connect request to the proxy server.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.HandShakeComplete">
            <summary>
            References the callback method to be called when the protocol negotiation is completed.
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Net.QQPort">
            <summary>一些缺省的QQ端口定义
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.QQPort.GetPort(System.String)">
            <summary>根据名称得到QQPort对象
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.ConnectionPool.Send(System.String,LumaQQ.NET.Packets.OutPacket,System.Boolean)">
            <summary>
            发送一个包，由于是异步发送包，所以keepSent目前暂时无用
            <remark>abu 2008-03-07 </remark>
            </summary>
            <param name="id">The id.</param>
            <param name="packet">The packet.</param>
            <param name="keepSent">if set to <c>true</c> [keep sent].</param>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.Send(LumaQQ.NET.Packets.OutPacket,System.Boolean)">
            <summary>
            添加一个输出包
            <remark>abu 2008-03-03 </remark>
            </summary>
            <param name="outPacket">The out packet.</param>
            <param name="monitor">The monitor. true为同步发送，false为异步发送</param>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.ClearSendQueue">
            <summary>
            清空输出队列
            <remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.Connect">
            <summary>
            连接到服务器
            <remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.Close">
            <summary>
            关闭连接
            <remark>abu 2008-03-03 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.GetSocket">
            <summary>
            创建Socket对象
            	<remark>abu 2008-03-03 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.EndDataReceive(System.IAsyncResult)">
            <summary>
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.BeginSendData(Org.Mentalis.Network.ProxySocket.ProxySocket,LumaQQ.NET.Packets.OutPacket)">
            <summary>异步发送数据
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="socket">The socket.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.FillBytebuf(LumaQQ.NET.Packets.OutPacket,System.ByteBuffer)">
            <summary>
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.EndSendData(System.IAsyncResult)">
            <summary>
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="ar">The ar.</param>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.SocketConnection.SendData(Org.Mentalis.Network.ProxySocket.ProxySocket,LumaQQ.NET.Packets.OutPacket)">
            <summary>同步发送数据
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="socket">The socket.</param>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="P:LumaQQ.NET.Net.Sockets.SocketConnection.Name">
            <summary>
            连接名称
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="M:LumaQQ.NET.Net.Sockets.UDPConnection.FillHeader(System.ByteBuffer)">
            <summary>
            添加代理包的头部，Socks5代理包的格式为
            +----+------+------+----------+----------+----------+
            |RSV | FRAG | ATYP | DST.ADDR | DST.PORT |   DATA   |
            +----+------+------+----------+----------+----------+
            | 2  |  1   |  1   | Variable |    2     | Variable |
            +----+------+------+----------+----------+----------+
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.PacketManager">
            <summary>
            包管理器
            发送包，输入包，包事件
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.PacketManager.receiveQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.#ctor(LumaQQ.NET.QQClient)">
            <summary>
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.AddIncomingPacket(LumaQQ.NET.Packets.InPacket,System.String)">
            <summary>
            添加输入包
            	<remark>abu 2008-03-06 </remark>
            </summary>
            <param name="inPacket">The in packet.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.RemoveIncomingPacket">
            <summary> 从接收队列中得到第一个包，并且把这个包从队列中移除
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.RemoveResendPacket(LumaQQ.NET.Packets.InPacket)">
            <summary>
            收到服务器确认
            删除一个重发包
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.FirePacketArrivedEvent(LumaQQ.NET.Packets.InPacket)">
            <summary>通知包处理器包到达事件
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="inPacket">The in packet.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.AddResendPacket(LumaQQ.NET.Packets.OutPacket,System.String)">
            <summary>
            添加重发包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.SendPacket(LumaQQ.NET.Packets.OutPacket)">
             <summary>
             通用方法，发送一个packet
            * 这个方法用在一些包构造比较复杂的情况下，比如上传分组信息这种包，
            * 包中数据的来源是无法知道的也不是用几个参数就能概括的，可能也和实现有关。
             	<remark>abu 2008-03-07 </remark>
             </summary>
             <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.SendPacket(LumaQQ.NET.Packets.OutPacket,System.String)">
            <summary> 通过指定port发送一个包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.SendPacket(LumaQQ.NET.Packets.OutPacket,System.String,System.Boolean)">
            <summary>通过指定port发送一个包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <param name="port">The port.</param>
            <param name="monitor">if set to <c>true</c> [monitor].</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.SendPacketAnyway(LumaQQ.NET.Packets.OutPacket,System.String)">
            <summary>不管有没有登录，都把包发出去
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.OnReceivedUnknownPacket(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.UnknownInPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:ReceivedUnknownPacket"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.UnknownInPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.OnSendPacketSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.InPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SendedPacketSuccess"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.OutPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.OnSendPacketTimeOut(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.InPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:SendPacketTimeOut"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.InPacket,LumaQQ.NET.Packets.OutPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PacketManager.OnLostConnection(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.InPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Raises the <see cref="E:LostConnection"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.InPacket,LumaQQ.NET.Packets.OutPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:LumaQQ.NET.PacketManager.QQClient">
            <summary>
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <value></value>
        </member>
        <member name="E:LumaQQ.NET.PacketManager.ReceivedUnknownPacket">
            <summary>
            收到未知包
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PacketManager.SendPacketSuccessed">
            <summary>
            当一个包向服务器发送成功，并且收到服务器确认后
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PacketManager.SendPacketTimeOut">
            <summary>
            Occurs when [send packet time out].包发送超时事件 InPacket为null
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PacketManager.LostConnection">
            <summary>无法得到有效的网络连接来发送包
            	<remark>abu 2008-03-13 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.BasicFamilyParser">
            <summary> 基本协议族解析器   未完，等所有的协议包定义完后再来补充2008-02-19
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.IParser">
            <summary>
            包解析器
            	<remark>abu 2008-02-15 11:20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.Accept(System.ByteBuffer)">
            <summary>
            判断此parser是否可以处理这个包，判断不能影响到buf的指针位置
            	<remark>abu 2008-02-15 11:27</remark>
            </summary>
            <param name="buf">The buf.</param>
            <returns>true表示这个parser可以处理这个包</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.GetLength(System.ByteBuffer)">
            <summary>包的总长度
            	<remark>abu 2008-02-15 11:31 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <returns>包的总长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.ParseIncoming(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>从buf当前位置解析出一个输入包对象，解析完毕后指针位于length之后
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">包长度.</param>
            <param name="user">The user.</param>
            <returns>InPacket子类，如果解析不了返回null</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.ParseOutcoming(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>从buf当前位置解析出一个输出包对象，解析完毕后指针位于length之后
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">包长度.</param>
            <param name="user">QQ用户对象.</param>
            <returns>OutPacket子类，如果解析不了，返回null</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.IsDuplicate(LumaQQ.NET.Packets.InPacket)">
            <summary>
            检查这个输入包是否重复
            <remark>abu 2008-02-20 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <returns>true表示重复</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.IsDuplicatedNeedReply(LumaQQ.NET.Packets.InPacket)">
            <summary>检查这个包是重复包是否也要回复
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <returns>true表示即使这个包是重复包也要回复</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.Relocate(System.ByteBuffer)">
            <summary>假设buf的当前位置处是一个包，返回下一个包的起始位置。这个方法
            用来重新调整buf指针。如果无法重定位，返回当前位置
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <returns>下一个包的起始位置</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.IParser.GetHistory">
            <summary>
            PacketHistory类
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicFamilyParser.GetCommand(System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>
            得到包的命令和序号  
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicFamilyParser.CheckTcp(System.ByteBuffer)">
            <summary>检查一个包是否是tcp包
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <returns>true表示是</returns>
        </member>
        <member name="T:LumaQQ.NET.Packets.BasicInPacket">
            <summary>
            基本协议族的输入包基类:
             1. 包头标志，1字节，0x02
             2. 服务器端版本代码, 2字节
             3. 命令，2字节
             4. 包序号，2字节
             5. 包体
             6. 包尾标志，1字节，0x03
            	<remark>abu 2008-02-18 </remark>
            	在LumaQQ中，这边还定义了元数据。
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.InPacket">
            <summary>
            所有输入包的基类
            	<remark>abu 2008-02-18 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Packet">
            <summary>
            QQ所有包对象的基类
            	<remark>abu 2008-02-15 11:33 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Packet.crypter">
            <summary>
            加密解密对象
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Packet.bodyBuf">
            <summary>
            包体缓冲区，有back array，用来存放未加密时的包体，子类应该在putBody方法中
            使用这个缓冲区。使用之前先执行clear() 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Packet.user">
            <summary>QQUser
            为了支持一个JVM中创建多个QQClient，包中需要保持一个QQUser的引用以
            确定包的用户相关字段如何填写
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="F:LumaQQ.NET.Packets.Packet.bodyDecrypted">
            <summary>
            明文包体
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.#ctor(System.Byte,System.Char,LumaQQ.NET.QQCommand,System.Char,LumaQQ.NET.QQUser)">
            <summary>构造一个指定参数的包
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="header">包头</param>
            <param name="source">包源</param>
            <param name="command">包命令 </param>
            <param name="sequence">包序号 </param>
            <param name="user">QQ用户对象</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.#ctor(System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>从buf中构造一个OutPacket，用于调试。这个buf里面可能包含了抓包软件抓来的数据
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>从buf中构造一个OutPacket，用于调试。这个buf里面可能包含了抓包软件抓来的数据
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">要解析的内容长度</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.#ctor">
            <summary> 构造一个包对象，什么字段也不填，仅限于子类使用
            	<remark>abu 2008-02-18 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetLength(System.Int32)">
            <summary>得到UDP形式包的总长度，不考虑TCP形式
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="bodyLength">包体长度.</param>
            <returns>包长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.ParseTail(System.ByteBuffer)">
            <summary>从buf的当前未知解析包尾
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.ParseBody(System.ByteBuffer)">
            <summary>解析包体，从buf的开头位置解析起
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.DecryptBody(System.Byte[],System.Int32,System.Int32)">
            <summary>解密包体
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="body">包体字节数组.</param>
            <param name="offset">包体开始偏移.</param>
            <param name="length">包体长度.</param>
            <returns>解密的包体字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetBodyBytes(System.ByteBuffer,System.Int32)">
            <summary>得到包体的字节数组
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">包总长度</param>
            <returns>包体字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.ValidateHeader">
            <summary>校验头部
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.ParseHeader(System.ByteBuffer)">
            <summary>从buf的当前位置解析包头
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetHeaderLength">
            <summary>包头长度
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns>包头长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetTailLength">
            <summary>
            包尾长度
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns>包尾长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.PutHeader(System.ByteBuffer)">
            <summary>
            将包头部转化为字节流, 写入指定的ByteBuffer对象.
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.PutBody(System.ByteBuffer)">
            <summary>初始化包体
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetFamily">
            <summary>
            标识这个包属于哪个协议族
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.PutTail(System.ByteBuffer)">
            <summary>
            将包尾部转化为字节流, 写入指定的ByteBuffer对象.
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.EncryptBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            加密包体
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">未加密的字节数组.</param>
            <param name="offset">包体开始的偏移.</param>
            <param name="length">包体长度.</param>
            <returns>加密的包体</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetCryptographStart">
            <summary>
            密文的起始位置，这个位置是相对于包体的第一个字节来说的，如果这个包是未知包，
            返回-1，这个方法只对某些协议族有意义
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.Hash(System.Char,LumaQQ.NET.QQCommand)">
            <summary>
            得到hash值
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="sequence">The sequence.</param>
            <param name="command">The command.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.Packet.GetPacketName">
            <summary>包的描述性名称
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.PortName">
            <summary>输入包使用的连接名称
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.Command">
            <summary>
            包命令, 0x03~0x04.
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.Source">
            <summary>源标志, 0x01~0x02.
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.Sequence">
            <summary>包序号, 0x05~0x06.
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.Header">
            <summary>
            包头字节 
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.IsDuplicated">
            <summary>
            true表示这个包是一个重复包，重复包本来是不需要处理的，但是由于LumaQQ较常发生
             消息确认包丢失的问题，所以，这里加一个字段来表示到来的消息包是重复的。目前这个
             字段只对消息有效，姑且算个解决办法吧，虽然不是太好看
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Packet.DateTime">
            <summary>
            包的接收时间或发送时间
            	<remark>abu 2008-03-13 </remark>
            </summary>
            <value></value>
        </member>
        <member name="M:LumaQQ.NET.Packets.InPacket.#ctor(System.Byte,System.Char,LumaQQ.NET.QQCommand,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="header">The header.</param>
            <param name="source">The source.</param>
            <param name="command">The command.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.InPacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.InPacket.#ctor(System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.InPacket.ValidateHeader">
            <summary>
            校验头部, 默认返回 true
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.#ctor(LumaQQ.NET.QQCommand,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="command">The command.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.#ctor(System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>
            构造一个指定参数的包.从buf的当前位置开始解析直到limit
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            构造一个InPacket，从buf的当前位置解析length个字节
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.ParseHeader(System.ByteBuffer)">
            <summary>
            从buf的当前位置解析包头
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.ParseTail(System.ByteBuffer)">
            <summary>
            从buf的当前未知解析包尾
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.PutBody(System.ByteBuffer)">
            <summary>
            初始化包体
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.PutTail(System.ByteBuffer)">
            <summary>
            将包尾部转化为字节流, 写入指定的ByteBuffer对象.
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetPacketName">
            <summary>
            包的描述性名称
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.DecryptBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解密包体
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="body">包体字节数组.</param>
            <param name="offset">包体开始偏移.</param>
            <param name="length">包体长度.</param>
            <returns>解密的包体字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.EncryptBody(System.Byte[],System.Int32,System.Int32)">
            <summary>
            加密包体
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">未加密的字节数组.</param>
            <param name="offset">包体开始的偏移.</param>
            <param name="length">包体长度.</param>
            <returns>加密的包体</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetBodyBytes(System.ByteBuffer,System.Int32)">
            <summary>
            得到包体的字节数组
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">包总长度</param>
            <returns>包体字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetLength(System.Int32)">
            <summary>
            得到UDP形式包的总长度，不考虑TCP形式
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="bodyLength">包体长度.</param>
            <returns>包长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetHeaderLength">
            <summary>
            包头长度
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns>包头长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetTailLength">
            <summary>
            包尾长度
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns>包尾长度</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetCryptographStart">
            <summary>
            密文的起始位置，这个位置是相对于包体的第一个字节来说的，如果这个包是未知包，
            返回-1，这个方法只对某些协议族有意义
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicInPacket.GetFamily">
            <summary>
            标识这个包属于哪个协议族
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="T:LumaQQ.NET.Packets.BasicOutPacket">
            <summary>
            基本协议族的输出包基类
            基本协议族的包都具有以下的格式:
            1. 包头标志，1字节，0x02
            2. 客户端版本代码，2字节
            3. 命令，2字节
            4. 包序号, 2字节
            5. 用户QQ号，4字节
            6. 包体
            7. 包尾标志，1字节，0x03
            Note: 6部分将用会话密钥加密, 登录包例外，6部分要用密码密钥加密。请求登录令牌包例外，6部分不需加密
            	<remark>abu 2008-02-19 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.OutPacket">
            <summary>
            所有输出包基类，这个基类定义了输出包的基本框架
            <remark>abu 2008-02-18 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.OutPacket.seq">
            <summary>
            包起始序列号
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.OutPacket.ack">
            <summary>
            是否需要回应
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.OutPacket.resendCountDown">
            <summary>
            重发计数器
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.#ctor(System.Byte,LumaQQ.NET.QQCommand,System.Boolean,LumaQQ.NET.QQUser)">
            <summary>创建一个基本输出包
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="header">The header.</param>
            <param name="command">包命令.</param>
            <param name="ack">包是否需要回复.</param>
            <param name="user">QQ用户对象.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.#ctor(System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>从buf中构造一个OutPacket，用于调试。这个buf里面可能包含了抓包软件抓来的数据
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>从buf中构造一个OutPacket，用于调试。这个buf里面可能包含了抓包软件抓来的数据
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.ParseBody(System.ByteBuffer)">
            <summary>
            解析包体，从buf的开头位置解析起
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.PostFill(System.ByteBuffer,System.Int32)">
            <summary>
            回填，有些字段必须填完整个包才能确定其内容，比如长度字段，那么这个方法将在
            尾部填充之后调用
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="startPos">The start pos.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.Fill(System.ByteBuffer)">
            <summary>
             将整个包转化为字节流, 并写入指定的ByteBuffer对象.
             一般而言, 前后分别需要写入包头部和包尾部.
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.GetPacketName">
            <summary>
            包的描述性名称
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.NeedResend">
            <summary>
            是否需要重发.
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns>需要重发返回true, 否则返回false.</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.OutPacket.NeedAck">
            <summary>
            是否需要回复
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns>true表示包需要回复</returns>
        </member>
        <member name="P:LumaQQ.NET.Packets.OutPacket.TimeOut">
            <summary>
            超时截止时间，单位ms
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.OutPacket.SendCount">
            <summary>
            发送次数，只在包是不需要ack时有效，比如logout包是发4次，但是其他可能只发一次
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.OutPacket.Key">
            <summary>
            加密/解密密钥，只有有些包可能需要一个特定的密钥，如果为null，使用缺省的
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicOutPacket.#ctor(LumaQQ.NET.QQCommand,System.Boolean,LumaQQ.NET.QQUser)">
            <summary>构造一个参数指定的包.
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="command">命令.</param>
            <param name="ack">是否需要回应.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicOutPacket.#ctor(System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicOutPacket.ValidateHeader">
            <summary>
            校验头部
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicOutPacket.GetBodyBytes(System.ByteBuffer,System.Int32)">
            <summary>
            得到包体的字节数组
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">包总长度</param>
            <returns>包体字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.BasicOutPacket.GetLength(System.Int32)">
            <summary>
            得到UDP形式包的总长度，不考虑TCP形式
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="bodyLength">包体长度.</param>
            <returns>包长度</returns>
        </member>
        <member name="T:LumaQQ.NET.Packets.In._05.RequestAgentReplyPacket">
            <summary>
             * 请求中转服务器的回复包，格式为
            * 1. 头部
            * 2. 未知的8字节，和请求包保持相同
            * ------ 加密开始 -------
            * 3. 回复码，2字节
            * 4. 被请求的服务器IP，4字节，little-endian
            * 5. 被请求的服务器端口，2字节
            * 6. 会话ID，重定向时为0
            * 7. 重定向IP，4字节，little-endian
            * 8. 重定向的port，2字节
            * 9. 后面的消息长度，2字节
            * 10. 消息内容
            * ------ 加密结束 -------
            * 11. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets._05InPacket">
            <summary>
             * 05系列的输入包基类
            * 1. 包头标识，1字节
            * 2. source，2字节
            * 3. 包长度，2字节
            * 4. 包命令，2字节
            * 5. 包序号，2字节
            * 6. 用户QQ号，4字节
            * 7. 包体
            * 8. 包尾，1字节
            * 
            * 值得注意的是：这种包的包体并非完全加密型，而是部分加密型
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket">
            <summary>
            * 请求下载分组好友列表的回复包，格式为
            * 1. 头部
            * 2. 操作字节，下载为0x1
            * 3. 回复码，1字节
            * 4. 4个未知字节，全0
            * 5. 下一个下载包的起始好友号，4字节
            * 6. 好友的QQ号，4字节
            * 7. 好友类型，0x1表示普通好友，0x4表示群
            * 8. 分组序号，1字节，但是这个很奇怪，不是1，2，3那样的，而是用序号乘4，比如如果是属于第2个组，
            *    那么这个就是8，注意我的好友组是第0组，但是有可能这个数字不是4的倍数，那就不知道什么
            *    意思了，但是除以4得到组序号的方法仍然不受影响
            * 9. 如果还有更多好友，重复4，5，6部分
            * 10. 尾部
            * 
            * 这个包解析后产生的数据可以通过哈希表friends访问，每一个组为一个list，用组的索引为key，
            * 比如第0，第1组，分别可以得到一个List对象，list中包含了好友的qq号
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket.ParseBody(System.ByteBuffer)">
            <summary>
            解析包体，从buf的开头位置解析起
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket.Friends">
            <summary>
            Gets or sets the friends.
            </summary>
            <value>The friends.</value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket.Finished">
            <summary>分组好友是否已经下载完
            Gets the finished.
            </summary>
            <value>The finished.</value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket.BeginFrom">
            <summary>起始好友号
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket.ReplyCode">
            <summary>
            Gets or sets the reply code.
            </summary>
            <value>The reply code.</value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.DownloadGroupFriendReplyPacket.SubCommand">
            <summary>
            Gets or sets the sub command.
            </summary>
            <value>The sub command.</value>
        </member>
        <member name="T:LumaQQ.NET.Packets.ErrorPacketType">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.ErrorPacketType.ERROR_CONNECTION_BROKEN">
            <summary>
            远端已经关闭连接 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.ErrorPacketType.ERROR_TIMEOUT">
            <summary>
             操作超时
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.ErrorPacketType.ERROR_PROXY">
            <summary>
            代理服务器错误
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.ErrorPacketType.ERROR_NETWORK">
            <summary>
            网络错误
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.ErrorPacketType.RUNTIME_ERROR">
            <summary>
            运行时错误，调试用
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.ErrorPacket">
            <summary>这个包和协议无关，它用来通知上层，有些错误发生了，上层应该检查errorCode字段
            来获得更具体的信息
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.ErrorPacket.#ctor(LumaQQ.NET.Packets.ErrorPacketType,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <param name="errorType">Type of the error.</param>
            <param name="user">The user.</param>
        </member>
        <member name="P:LumaQQ.NET.Packets.ErrorPacket.e">
            <summary>在运行时错误的异常
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.ErrorPacket.TimeOutPacket">
            <summary>
            用在超时错误中
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket">
            <summary>
            好友认证处理确认包
             * 这个包是发送好友认证信息的确认包，格式为
             * 1. 头部
             * 2. 应答码，1字节
             * 3. 尾部
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket.GetPacketName">
            <summary>
            包的描述性名称
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.AddFriendAuthResponseReplyPacket.ParseBody(System.ByteBuffer)">
            <summary>
            解析包体，从buf的开头位置解析起
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.AdvancedSearchUserReplyPacket">
            <summary>
             * 高级搜索的回复包
             * 1. 头部
             * 2. 回复码，1字节，0x00表示还有数据，0x01表示没有更多数据了，当为0x01时，后面没有内容了
             *    当为0x00时，后面才有内容
             * 3. 页号，从1开始，2字节，如果页号后面没有内容了，那也说明是搜索结束了
             * 4. QQ号，4字节
             * 5. 性别，1字节，表示下拉框索引
             * 6. 年龄，2字节
             * 7. 在线，1字节，0x01表示在线，0x00表示离线
             * 8. 昵称长度，1字节
             * 9. 昵称
             * 10. 省份索引，2字节
             * 11. 城市索引，2字节，这个索引是以"不限"为0开始算的，shit
             * 13. 头像索引，2字节
             * 14. 如果有更多结果，重复4 - 13部分
             * 15. 尾部
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.AdvancedSearchUserReplyPacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.AdvancedSearchUserReplyPacket.GetPacketName">
            <summary>
            包的描述性名称
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.AdvancedSearchUserReplyPacket.ParseBody(System.ByteBuffer)">
            <summary>
            解析包体，从buf的开头位置解析起
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.AuthorizeReplyPacket">
            <summary>
             * 发送验证消息的回复包
             * 1. 头部
             * 2. 子命令，1字节
             * 3. 要添加的QQ号，4字节
             * 4. 回复码，1字节
             * 5. 尾部
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.ChangeStatusReplyPacket">
            <summary>
             * 这个是用户自己改变在线状态的应答包，格式是
             * 1. 头部
             * 2. 一个字节的应答码，0x30表示成功，定义在QQ接口中
             * 3. 尾部
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket">
            <pre>
            群命令的回复包，根据不同的子命令类型格式有所不同：
            创建群的回复包，格式为：
            1. 头部
            2. 命令类型，1字节，创建群是0x1
            3. 回复码，1字节，成功是0x0，如果成功则后面为
               1. 群内部ID，4字节，如果为0，表示创建失败
               2. 群外部ID，4字节，如果为0，表示创建失败
            4. 如果回复码不为0，则后面为出错信息
            5. 尾部
            
            创建临时群的回复包
            1. 头部
            2. 命令类型，1字节，0x30
            3. 回复码，1字节
            4. 临时群类型，1字节，0x01是多人对话，0x02是讨论组
            5. 父群内部ID，4字节
            6. 创建的临时群的内部ID，4字节
            7. 尾部
            
            激活群的回复包，格式为：
            1. 头部
            2. 命令类型，激活是0x5
            3. 回复码，1字节，成功是0x0
            4. 群的内部ID
            5. 尾部
            
            得到群信息的回复包，格式为：
            1. 头部
            2. 命令类型，1字节，得到群信息是0x4
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节
            5. 群外部ID，4字节
            6. 群类型，1字节
            7. 未知的4字节
            8. 创建者QQ号，4字节
            9. 认证类型，1字节
            10. 群分类，4字节，这是2004的分类法。2004只有4个分类
            11. 未知的2字节
            12. 群分类ID，4字节，这是2005的分类法，2005的分类最多有三层。每个分类有一个唯一的id
            13. 未知的2字节
            14. 未知的1字节
            15. 群version id, 4字节
            16. 群名称长度，1字节
            17. 群名称
            18. 未知的两字节，全0
            19. 群声明长度，1字节
            20. 群声明
            21. 群描述长度，1字节
            22. 群描述
            23. 群中成员的QQ号，4字节
            24. 成员所属组织的序号，1字节，组织序号从1开始，如果为0，表示其不在某个组织中，
               一个成员只能在一个组织里面，组织和讨论组不同，讨论组可以看成是群中群，组织
                只是群成员的分类而已，它并不是一个群
            25. 群成员的类型，是不是管理员之类的，1字节
            26. 如果存在更多成员，重复23-25部分
            27. 尾部
            
            得到临时群信息的回复包，格式为
            1. 头部
            2. 命令类型，1字节，0x33
            3. 回复码，1字节，成功是0x00
            4. 群类型，1字节
            5. 父群内部ID，4字节
            6. 临时群内部ID，4字节
            7. 创建者QQ号，4字节
            8. 未知的4字节，全0
            9. 群名称长度，1字节
            10. 群名称
            11. 群中成员的QQ号，4字节
            12. 成员所属组织的序号，1字节。对于临时群来说，没有群内组织的概念，所以这个字段无用
            13. 如果有更多成员，重复11-12部分
            14. 尾部
            
            退出群的回复，格式为：
            1. 头部
            2. 命令类型，1字节，退出是0x9
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节，应该是个非0值
            5. 尾部
            
            解散群的回复
            1. 头部
            2. 子命令，1字节，0x1D
            3. 回复码，1字节
            4. 群内部id，4字节
            5. 尾部
            
            请求成员信息的回复包，格式为
            1. 头部
            2. 命令类型，1字节，请求成员信息是0x0C
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节
            5. 成员QQ号，4字节
            6. 头像号，2字节
            7. 年龄，1字节
            8. 性别，1字节
            9. 昵称长度，1字节
            10. 昵称
            11. 未知的2字节
            12. 扩展标志，1字节
            13. 通用标志，1字节
            14. 如果有更多成员，重复5-13部分，5-13部分其实也就是QQFriend结构
            15. 尾部
            
            得到在线成员的回复包，格式为：
            1. 头部
            2. 命令类型，1字节，请求成员信息是0x0B
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节
            5. 未知字节，0x3C
            6. 在线成员的qq号
            7. 如果有更多在线成员，重复6
            8. 尾部
            
            激活临时群的回复包
            1. 头部
            2. 命令类型，1字节，0x37
            3. 回复码，1字节
            4. 临时群类型，1字节
            5. 父群内部ID，4字节
            6. 临时群内部ID，4字节
            7. 成员QQ号，4字节
            8. 如果有更多成员，重复7部分
            9. 尾部
            
            请求加入群的回复包，格式为：
            1. 头部
            2. 命令类型，1字节，请求成员信息是0x07
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节
            5. 回复码，这个回复码是比较细的特定于join请求的回复，1字节
            6. 尾部
            
            请求加入群的认证信息回复包，没什么太大用处，就是表示服务器收到了，格式为：
            1. 头部
            2. 命令类型，这里是0x8
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节，如果为0表示出错
            5. 尾部
            
            修改群信息的回复包，格式为：
            1. 头部
            2. 命令类型，这里是0x03
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节
            5. 尾部
            
            修改群成员的回复包，格式为：
            1. 头部
            2. 命令类型，这里是0x03
            3. 回复码，1字节，成功是0x0
            4. 群内部ID，4字节
            5. 尾部
            
            搜索群的回复包，格式为：
            1. 头部
            2. 命令类型，这里是0x06
            3. 回复码，1字节，成功是0x0
            4. 搜索方式，1字节
            5. 群内部ID，4字节
            6. 群外部ID，4字节
            7. 群类型，1字节
            8. 未知的4字节
            9. 群创建者，4字节
            10. 群分类，4字节，这是2004的分类法。2004只有4个分类
            11. 群分类，4字节，这是2005分类法
            12. 未知的2字节
            13. 群名称长度，1字节
            14. 群名称
            15. 未知的两字节
            16. 认证类型，1字节
            17. 群简介长度，1字节
            18. 群简介
            19. 尾部
            
            发送群信息和发送扩展群信息的回复包
            1. 头部
            2. 命令类型，1字节，0x0A
            3. 回复码，1字节
            4. 群内部id，4字节
            5. 尾部
            
            发送临时群信息的回复包
            1. 头部
            2. 命令类型，1字节，0x35
            3. 回复码，1字节
            4. 临时群类型，1字节
            5. 父群内部ID，4字节
            6. 临时群内部ID，4字节
            7. 尾部
            
            退出临时群的回复包
            1. 头部
            2. 命令类型，1字节，0x32
            3. 回复码，1字节
            4. 临时群类型，1字节
            5. 父群内部ID，4字节
            6. 临时群内部ID，4字节
            7. 尾部
            
            修改临时群信息的回复包
            1. 头部
            2. 命令类型，这里是0x34
            3. 回复码，1字节，成功是0x00
            4. 临时群类型，1字节
            5. 父群内部ID，4字节
            6. 临时群内部ID，4字节
            7. 尾部
            
            修改临时群成员的回复包
            1. 头部
            2. 命令类型，这里是0x31
            3. 回复码，1字节，成功是0x00
            4. 临时群类型，1字节
            5. 父群内部ID，4字节
            6. 临时群内部ID，4字节
            7. 操作方式，1字节，0x01是添加，0x02是删除
            8. 操作的成员QQ号，4字节
            9. 如果有更多成员，重复8部分
            10. 尾部
            
            讨论组操作的回复包，子命令类型为0x02时（得到讨论组列表）
            1. 头部
            2. 命令类型，0x36
            3. 回复码，1字节
            4. 子命令类型，1字节，0x02
            5. 群内部id，4字节
            6. 群外部id，4字节
            7. 讨论组id，4字节
            8. 讨论组名称字节长度，1字节
            9. 讨论组名称
            10. 如果有更多讨论组，重复7-9部分
            11. 尾部 
            
            讨论组操作的回复包，子命令类型为0x01时（得到多人对话列表）
            1. 头部
            2. 命令类型，0x36
            3. 回复码，1字节
            4. 子命令类型，1字节，0x01
            5. 群内部id，4字节，为0
            6. 群外部id，4字节，为0
            7. 讨论组id，4字节
            8. 讨论组名称字节长度，1字节
            9. 讨论组名称
            10. 如果有更多讨论组，重复7-9部分
            11. 尾部 
            
            从服务器更新组织架构的回复包
            1. 头部
            2. 命令，1字节，0x12
            3. 回复码，1字节，0x00为成功 
            4. 群内部ID，4字节
            5. 未知1字节，0x00
            6. 组织Version ID，4字节，意义和群的Version ID相同。
            	  如果这个字段为0，表示没有组织，并且7-12部分不存在
            7. 组织个数，1字节
            8. 组织序号，1字节，从1开始
            9. 组织的层次关系，4字节。QQ的组织最多支持4层，4个字节一共32bit，第一层用了8位，
               后面的层用了6位，所以还有6位是保留未用的。举个例子说明一下这个字段的具体格式，
               假如这个字段的二进制表示为
               0000 0001 0000 1100 0101 0010 0100 0000
               那么得知，前8位0000 0001，值为1
               然后是0000 11，值为3
               然后是00 0101，值为5
               然后后0010 01，值为9，
               最后6位保留未用，
               所以这个组织位于第四层，它是父节点的第9个子组织，它的父节点是祖父节点的第5个子组织，
               它的祖父节点是曾祖父节点的第3个组织，它的曾祖父节点是群的第一个组织。
               我们要分清楚的是，组织的序号和层次号并不是一样的，也不是有对应关系的。所以目前来看，
               这个关系需要我们自己维护，以便查找组织
            10. 组织名称字节长度，1字节
            11. 组织名称
            12. 如果有更多组织，重复8-11部分
            13. 尾部 
            
            提交组织架构的回复包
            1. 头部
            2. 命令，1字节，0x11
            3. 回复码，1字节，0x00为成功 
            4. 群内部ID，4字节
            5. 组织Version ID，4字节
            6. 组织个数，2字节
            7. 组织序号，1字节
            8. 如果有更多组织，重复7部分
            9. 尾部
            
            提交成员分组情况的回复包
            1. 头部
            2. 命令，1字节，0x13
            3. 回复码，1字节，0x00为成功 
            4. 群内部ID，4字节
            5. 成员分组情况version id，4字节
            6. 尾部
            
            修改群名片回复包
            1. 头部
            2. 命令, 1字节，0x0E
            3. 回复码，1字节，0x00为成功 
            4. 群内部ID，4字节
            5. 自己的QQ号，4字节
            
            批量得到群名片真实姓名的回复包
            1. 头部
            2. 命令, 1字节，0x0F
            3. 回复码，1字节，0x00为成功 
            4. 群内部ID，4字节
            5. 群名片Version id， 4字节
            6. 下一个请求包的起始位置，4字节。这个字段如果为0，表示所有名片都已经得到
               如果不为0，表示起始记录数，比如一共有10条名片信息，这次得到了6条，还剩
               4条，那么这个字段就是0x00000006，因为下一条的序号是6(从0开始)
            7. 成员QQ号，4字节
            8. 真实姓名长度，1字节
            9. 真实姓名
            10. 如果有更多成员，重复7-9部分
            11. 尾部
            
            得到单个成员全部群名片信息的回复包
            1. 头部
            2. 命令, 1字节，0x0F
            3. 回复码，1字节，0x00为成功 
            4. 群内部ID，4字节
            5. 成员QQ号，4字节
            6. 真实姓名长度，1字节
            7. 真实姓名
            8. 性别索引，1字节，性别的顺序是'男', '女', '-'，所以男是0x00，等等
            9. 电话字符串长度，1字节
            10. 电话的字符串表示
            11. 电子邮件长度，1字节
            12. 电子邮件
            13. 备注长度，1字节
            14. 备注内容
            15. 尾部
            
            设置角色的回复包
            1. 头部
            2. 命令，1字节，0x1B
            3. 回复码，1字节
            4. 群内部ID，4字节
            5. 群version id, 4字节
            6. 被设置的QQ号，4字节
            7. 操作之后成员的角色，1字节
            8. 尾部
            
            转让角色的回复包
            1. 头部
            2. 命令，1字节，0x1B
            3. 回复码，1字节
            4. 群内部ID，4字节
            5. 转让到的QQ号，4字节
            6. 根据回复码不同，有:
               i. 3部分为0x00时，为群version id，4字节
               ii. 3部分为其他值时，为错误信息
            7. 尾部
            </pre>
            
            @author luma
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseDismissCluster(System.ByteBuffer)">
            <summary>
            处理解散群的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseTransferRole(System.ByteBuffer)">
            <summary>
            处理转让角色的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseSetRole(System.ByteBuffer)">
            <summary>
            处理设置群成员角色的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseGetCard(System.ByteBuffer)">
            <summary>
            处理得到单个成员群名片回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseGetCardBatch(System.ByteBuffer)">
            <summary>处理批量得到群名片真实姓名回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseModifyCard(System.ByteBuffer)">
            <summary>解析修改群名片回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
            
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseModifyTempClusterInfo(System.ByteBuffer)">
            <summary>
            处理修改临时群信息回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseCommitMemberOrganization(System.ByteBuffer)">
            <summary>
            处理提交成员分组情况的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseCommitOrganization(System.ByteBuffer)">
            <summary>
            处理提交组织架构的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseUpdateOrganization(System.ByteBuffer)">
            <summary>
            解析更新组织架构回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseSubClusterOp(System.ByteBuffer)">
            <summary>
            解析子群操作回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseCreateTempCluster(System.ByteBuffer)">
            <summary>
            解析创建临时群回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseExitTempClusterReply(System.ByteBuffer)">
            <summary>
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseSendTempClusterIMReply(System.ByteBuffer)">
            <summary>
            处理发送临时群信息的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseModifyMemberReply(System.ByteBuffer)">
            <summary>
            处理修改群成员的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseSendIMReply(System.ByteBuffer)">
            <summary>处理发送消息的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseSearchReply(System.ByteBuffer)">
            <summary>处理搜索群的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseModifyInfoReply(System.ByteBuffer)">
            <summary>
            处理修改群信息的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseJoinAuthReply(System.ByteBuffer)">
            <summary>
            处理认证信息的回复包，这个回复包只是个简单的回复，没什么用
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseJoinReply(System.ByteBuffer)">
            <summary>
            处理加入群的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseGetOnlineMemberReply(System.ByteBuffer)">
            <summary>
            处理得到在线成员的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseActivateTempCluster(System.ByteBuffer)">
            <summary>
            处理激活临时群回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseGetMemberInfoReply(System.ByteBuffer)">
            <summary>
            处理得到群成员信息的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseExitReply(System.ByteBuffer)">
            <summary>处理退出群的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseGetInfoReply(System.ByteBuffer)">
            <summary>
            处理得到群信息的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseGetTempClusterInfoReply(System.ByteBuffer)">
            <summary>
            处理得到临时群信息的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseActivateReply(System.ByteBuffer)">
            <summary>
            处理激活群的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParseCreateReply(System.ByteBuffer)">
            <summary>
            解析创建群的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.SubCommand">
            <summary>
            子命令 
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ReplyCode">
            <summary>
            回复码 
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ClusterId">
            <summary>
            群内部id
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ExternalId">
            <summary>
            群外部id 
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.Type">
            <summary>
            群类型
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ParentClusterId">
            <summary>
            父群内部ID 
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.VersionId">
            <summary>
            群版本号
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.MemberQQ">
            <summary>
            如果某个包是对单个群成员进行操作，则使用这个字段保存QQ号 
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.ErrorMessage">
            <summary>
            如果ReplyCode不是ok，那么这个字段有效，表示出错信息
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.Info">
            <summary>
            群信息
            仅用于得到群信息的回复包，list的元素类型为ClusterInfo
            <remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.Members">
            <summary>
            群成员列表，元素类型为Integer，包含了成员的QQ号
            仅用于得到群信息和得到临时群成员列表的回复包
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.MemberInfos">
            <summary>
            包含了群成员信息的列表，元素类型是QQFriend
            仅用于得到群成员信息的回复包，list的元素类型是QQFriend
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.OnlineMembers">
            <summary>
            包含了在线成员列表，元素类型是Integer，表示成员的QQ号
            仅用于得到在线成员的回复包，list的元素类型是Integer
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.SubClusters">
            <summary>
            子群列表，可能是讨论组也可能是多人对话
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.SubClusterOpByte">
            <summary>
            子群操作子类型
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.JoinReply">
            <summary>
            加入群的回复
            	<remark>仅用于加入群的回复包 abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.SearchType">
            <summary>
            搜索类型
            仅用于搜索群的回复包，元素类型是ClusterInfo
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.Clusters">
            <summary>
            搜索到的群，类型是ClusterInfo 
            	<remark> abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.OrganizationVersionId">
            <summary>
            用于更新组织架构的回复包和提交组织架构的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.OrganizationCount">
            <summary>
            用于更新组织架构的回复包和提交组织架构的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.MemberOrganizationVersionId">
            <summary>
            用于提交成员分组的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.CardStubs">
            <summary>
            用于批量得到群名片真实姓名的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.Card">
            <summary>
            用于得到单个成员群名片的回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.ClusterCommandReplyPacket.Role">
            <summary>用于设置角色回复包
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.DeleteFriendReplyPacket">
            <summary>
             * 删除好友的回复包，格式为
             * 1. 头部
             * 2. 应答码，1字节
             * 3. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Entities.FileInfo">
            <summary>请求传送文件包的数据封装类，传送文件包是发送消息包的变种格式
            	<remark>abu 2008-02-23 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Entities.FileInfo.Read(System.ByteBuffer)">
            <summary>
            给定一个输入流，解析SendFileRequest结构
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Entities.FileInfo.FileName">
            <summary>
            文件名
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Entities.FileInfo.FileSize">
            <summary>
            文件大小
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.FriendChangeStatusPacket">
            <summary>
             * 好友状态改变包，这个是从服务器发来的包，格式为
            * 1. 头部
            * 2. 好友QQ号，4字节
            * 3. 未知的4字节
            * 4. 未知的4字节
            * 5. 好友改变到的状态，1字节
            * 6. 好友的客户端版本，2字节。这个版本号不是包头中的source，是内部表示，比如2004是0x04D1
            * 7. 未知用途的密钥，16字节
            * 8. 用户属性标志，4字节
            * 9. 我自己的QQ号，4字节
            * 10. 未知的2字节
            * 11. 未知的1字节
            * 12. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket">
            <summary>
             * 上传下载好友备注的回复包，格式为：
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 如果是0x0，后面的部分为
            * 	  a. 是否还有更多备注，0x00表示有，0x01表示无
            *    b. QQ号，4字节
            *    c. 一个未知字节，0x00
            *    d. 名称长度，1字节
            *    e. 名称
            *    f. 手机号码长度, 1字节
            *    g. 手机号码
            *    h. 常用电话长度, 1字节
            *    i. 常用电话
            *    j. 联系地址长度, 1字节
            *    k. 联系地址
            *    l. 电子邮箱长度, 1字节
            *    m. 电子邮箱
            *    n. 邮编长度，1字节
            *    o. 邮编
            *    p. 备注长度，1字节
            *    q. 备注
            *    r. 如果还有更多，重复b - q部分
            *    如果是0x1或者0x02，后面的部分为
            *    i. 1字节应答码，0x0表示成功
            *    如果是0x3，后面的部分为(后面也可能什么都没有，说明这个好友没有备注)
            *    i.   操作对象的QQ号，4字节
            *    ii.  一个未知字节0
            *    iii. 分隔符0x1
            *    iv.  以下为备注信息，一共7个域，域的顺序依次次是
            *   	   姓名、手机、电话、地址、邮箱、邮编、备注
            *         每个域都有一个前导字节，这个字节表示了这个域的字节长度
            * 4. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket.ReplyCode">
            <summary>
            应答码，仅用在上传回复
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket.QQ">
            <summary>
            操作对象的QQ号
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket.Remark">
            <summary>
            备注信息，仅用在下载时
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket.SubCommand">
            <summary>
            操作字节
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket.HasRemark">
            <summary>
            是否有备注，如果子命令是下载备注，则这个字段表示这个好友是否有备注
            如果子命令是批量下载备注，则这个字段表示是否还有更多的备注可以下载
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.FriendDataOpReplyPacket.Remarks">
            <summary>仅用在批量下载备注时，key是qq号，value是FriendRemark对象
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.FriendLevelOpReplyPacket">
            <summary>
             * 这个查询QQ号等级的应答包，格式是
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 查询的号码, 4字节
            * 4. 活跃天数, 4字节
            * 5. 等级, 2字节
            * 6. 升级剩余天数, 2字节
            * 7. 如果有更多好友，重复3-6部分
            * 8. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.GetFriendListReplyPacket">
            <summary>
             * 请求好友列表的应答包，格式为
            * 1. 头部
            * 2. 下一次好友列表开始位置，这个位置是你所有好友排序后的位置，如果为0xFFFF，那就是你的好友已经全部得到了
            *    每次都固定的返回50个好友，所以如果不足50个了，那么这个值一定是0xFFFF了
            * 3. 好友QQ号，4字节
            * 4. 头像，2字节
            * 5. 年龄，1字节
            * 6. 性别，1字节
            * 7. 昵称长度，1字节
            * 8. 昵称，不定字节，由8指定
            * 9. 用户标志字节，4字节
            * 10. 重复3-9的结构
            * 11.尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.GetFriendListReplyPacket.Finished">
            <summary>是否已经结束
            	<remark>abu 2008-03-12 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.GetOnlineOpReplyPacket">
            <summary>
             * 得到在线好友列表的应答包，格式为
            * 1. 头部
            * 2. 在线好友是否已经全部得到，1字节
            * 3. 31字节的FriendStatus结构
            * 4. 2个未知字节
            * 5. 1个字节扩展标志
            * 6. 1个字节通用标志
            * 7. 2个未知字节
            * 8. 1个未知字节
            * 9. 如果有更多在线好友，重复2-8部分
            * 10. 尾部
            * 
            * 这个回复包最多返回30个在线好友，如果有更多，需要继续请求
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.GetOnlineOpReplyPacket.Finished">
            <summary>true表示没有更多在线好友了
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.GetOnlineOpReplyPacket.Position">
            <summary>
            下一个请求包的起始位置，仅当finished为true时有效
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.GetTempClusterOnlineMemberReplyPacket">
            <summary>
            * 得到临时群在线成员回复包
            *1. 头部
            *2. 未知1字节，0x01
            *3. 回复码，1字节
            *4. 未知1字节，0x3C
            *5. 在线成员QQ号，4字节
            *6. 如果有更多在线成员，重复4部分
            *7. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.GetUserInfoReplyPacket">
            <summary>
             * 请求用户信息的回复包，格式为
            *1. 头部
            *2. 由ascii 30分隔的各个字段
            *3. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.GroupDataOpReplyPacket">
            <summary>
             * 下载分组名称的回复包，格式为
            *1. 头部
            *2. 子命令，1字节，下载是0x1
            *3. 回复码，1字节
            *5. 未知的4字节
            *6. 组序号，从1开始，0表示我的好友组，因为是缺省组，所以不包含在包中
            *7. 16字节的组信息，开始是组名，以0结尾，如果长度不足16字节，则其余部分可能为0，也可能
            *   为其他字节，含义不明
            *8. 若有多个组，重复6，7部分
            *9. 尾部
            *
            *上传分组名称的回复包，格式为
            *1. 头部
            *2. 子命令，1字节
            *3. 回复码，1字节
            *4. 组需要，从1开始，0表示我的好友组，因为是缺省组，所以不包含在包中
            *5. 如果有更多组，重复4部分
            *6. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.KeepAliveReplyPacket">
            <summary>
             * Keep Alive的应答包，格式为
            *1. 头部
            *2. 6个域，分别是"0", "0", 所有在线用户数，我的IP，我的端口，未知含义字段，用ascii码31分隔
            *3. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.LoginReplyPacket">
            <summary>
             * QQ登陆应答包
            *1. 头部
            *2. 回复码, 1字节
            *2部分如果是0x00
            *3. session key, 16字节
            *4. 用户QQ号，4字节
            *5. 我的外部IP，4字节
            *6. 我的外部端口，2字节
            *7. 服务器IP，4字节
            *8. 服务器端口，2字节
            *9. 本次登录时间，4字节，为从1970-1-1开始的毫秒数除1000
            *10. 未知的2字节
            *11. 用户认证令牌,24字节
            *12. 一个未知服务器1的ip，4字节
            *13. 一个未知服务器1的端口，2字节
            *14. 一个未知服务器2的ip，4字节
            *15. 一个未知服务器2的端口，2字节
            *16. 两个未知字节
            *17. 两个未知字节
            *18. client key，32字节，这个key用在比如登录QQ家园之类的地方
            *19. 12个未知字节
            *20. 上次登陆的ip，4字节
            *21. 上次登陆的时间，4字节
            *22. 39个未知字节
            *2部分如果是0x01，表示重定向
            *3. 用户QQ号，4字节
            *4. 重定向到的服务器IP，4字节
            *5. 重定向到的服务器的端口，2字节
            *2部分如果是0x05，表示登录失败
            *3. 一个错误消息
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.LoginReplyPacket.AuthToken">
            <summary>认证令牌，用在一些需要认证身份的地方，比如网络硬盘
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.LoginReplyPacket.RedirectIPString">
            <summary>重定向服务器地址的字符串
            	<remark>abu 2008-03-10 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.ModifyInfoReplyPacket">
            <summary>
            * 修改信息的回复包，格式是
            *1. 头部
            *2. 我的QQ号的字符串形式（成功了就应该是我的QQ号，否则就是失败了）
            *3. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket">
            <summary>
             * 隐私选项操作包
            *1. 头部
            *2. 子命令，1字节
            *3. 操作，1字节
            *4. 回复码，1字节
            *5. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.ReceiveIMPacket">
            <summary>
             * 别人发来的消息包，如果是普通消息，格式为
            *1. 头部
            *2. 发送者QQ号，4字节
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，是好友发的，还是陌生人发的，还是系统消息等等， 2字节
            *8. 发送者QQ版本，2字节
            *9. 发送者的QQ号，4字节
            *10. 接受者的QQ号，4字节
            *11. md5处理的发送方的uid和session key，16字节
            *12. 普通消息类型，比如是文本消息还是其他什么消息，2字节
            *13. 会话ID，2字节，如果是一个操作需要发送多个包才能完成，则这个id必须一致
            *14. 发送时间，4字节
            *15. 发送者头像，2字节
            *16. 是否有字体属性，4字节，有一般是0x00000001
            *17. 消息的分片数，1字节
            *18. 分片序号，1字节，从0开始
            *19. 消息id，2字节，同一条消息的不同分片id相同
            *20. 消息类型，这里的类型表示是正常回复还是自动回复之类的信息， 1字节
            *21. 消息正文，长度 = 剩余字节数 - 包尾字体属性长度
            *22. 字体属性，和SendIMPacket中的相同
            *23. 尾部
            *
            *如果是临时会话消息
            *2. 发送者QQ号，4字节
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，2字节，这里是0x001F
            *8. 发送者QQ号，4字节
            *9. 未知的4字节
            *10. 发送者昵称长度，1字节
            *11. 发送者昵称
            *12. Site名称长度，1字节
            *13. Site名称
            *14. 未知的1字节
            *15. 发送时间，4字节
            *16. 后面实际内容的长度，2字节
            *Note: 包的结尾有4个未知字节，所以16部分的长度是实际内容长度，不包括那4个字节
            *17. 消息内容，长度 = 16部分 - 字体属性长度
            *18. 字体属性，参见SendIMPacket
            *19. 未知的4字节
            *20. 尾部
            *
            *如果是群通知
            *1. 头部
            *2. 群的内部ID，4字节
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，是好友发的，还是陌生人发的，还是系统消息等等， 2字节，0x002C
            *8. 群的外部ID，4字节
            *9. 群类型，1字节
            *10. 操作码，1字节
            *11. 接受者QQ号，4字节
            *12. 接受者当前角色，1字节
            *13. 尾部
            *
            *如果是个性签名改变通知
            *1. 头部
            *2. 发送者QQ号，在这里是10000，4字节
            *3. 接受者QQ号，4字节
            *4. 服务器端包序号，4字节
            *5. 发送者IP，4字节
            *6. 发送者端口，2字节
            *7. 消息类型，2字节，在这里是0x0041
            *8. 个性签名改变的QQ号，4字节
            *9. 个性签名改变的时间，4字节
            *10. 新个性签名的字节长度，1字节
            *11. 新个性签名
            *12. 尾部
            *
            *如果是系统消息：
            *1-7. 与普通消息相同，只不过7是0x0030，表示是系统消息
            *8. 系统消息类型，1字节
            *9. 系统消息长度，1字节
            *10. 系统消息
            *
            *如果是来自绑定手机的手机短消息，格式为：
            *1. 头部
            *2. 发送者QQ号，4字节
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，是好友发的，还是陌生人发的，还是系统消息等等， 2字节，0x000B
            *8. 未知1字节，0x0
            *9. 发送者QQ号，4字节
            *10. 发送者头像，2字节
            *11. 发送者名称，最多13字节，不足后面补0
            *12. 未知的1字节，0x4D
            *13. 消息内容，160字节，如果不足，填0
            *注：在接收长消息时，13部分前两个字节为固定内容，似乎是用来标识同一消息的分片，但是
            *QQ本身却没有处理这个字段，而是把这个字段也显示出来了，似乎是个bug
            *14. 尾部
            *
            *如果是来自移动QQ用户的手机短消息，格式为：
            *1. 头部
            *2. 发送者QQ号，4字节
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，是好友发的，还是陌生人发的，还是系统消息等等， 2字节，0x0013
            *8. 未知1字节
            *9. 发送者QQ号，4字节
            *10. 发送者头像，2字节
            *11. 发送者名称，最多13字节，不足后面补0
            *12. 未知的1字节，0x4D
            *13. 短信发送时间，4字节
            *14. 未知1字节，0x03
            *15. 短信内容，160字节，不足填0
            *注：在接收长消息时，15部分前两个字节为固定内容，似乎是用来标识同一消息的分片，但是
            *QQ本身却没有处理这个字段，而是把这个字段也显示出来了，似乎是个bug
            *16. 尾部
            *
            *如果是来自移动QQ用户的手机短消息(使用的是手机号码)，格式为：
            *1. 头部
            *2. 发送者QQ号，4字节
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，是好友发的，还是陌生人发的，还是系统消息等等， 2字节，0x0014
            *8. 未知1字节
            *9. 移动QQ的手机号，18字节，不足补0
            *10. 未知的2字节
            *11. 短信发送时间，4字节
            *12. 未知1字节，0x03
            *13. 短信内容，160字节，不足填0
            *注：在接收长消息时，13部分前两个字节为固定内容，似乎是用来标识同一消息的分片，但是
            *QQ本身却没有处理这个字段，而是把这个字段也显示出来了，似乎是个bug
            *14. 尾部
            *
            *如果是来自普通手机的消息
            *1. 头部
            *2. 发送者QQ号，4字节，在这里是10000
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，是好友发的，还是陌生人发的，还是系统消息等等， 2字节，0x000C
            *8. 未知1字节，0x0
            *9. 发送者手机号码，20字节，不足填0
            *10. 短信内容，160字节，不足填0
            *注：在接收长消息时，15部分前两个字节为固定内容，似乎是用来标识同一消息的分片，但是
            *QQ本身却没有处理这个字段，而是把这个字段也显示出来了，似乎是个bug
            *11. 尾部
            *
            *如果是请求传送文件，格式为
            *1 - 18. 与普通消息格式相同，差别只有12部分，为0x0035，表示是请求传送文件
            *19.     未用部分，全0，15字节
            *20.     传输类型，1字节
            *21.     连接方式，1字节
            *22.     请求者外部ip，4字节
            *23.     请求者QQ端口，2字节，如果连接方式为0x3，则这个部分没有
            *24.     第一个监听端口，2字节
            *25.     请求者真实ip，4字节
            *26.     第二个监听端口，2字节
            *27.     空格符0x20
            *28.     分隔符0x1F
            *29.     文件名，不定长，不包含路径名
            *30.     分隔符0x1F
            *31.     文件字节数的字符串形式加“ 字节”
            *32.     尾部
            *
            *如果是接受传送文件的请求，格式为
            *1 - 18. 与普通消息格式相同，差别只有12部分，对于UDP请求，为0x0037
            *19 - 26 和0x0035时相同
            *27.     尾部 
            *
            *如果是通知文件传送的端口，格式为
            *1 - 18. 与普通消息格式相同，差别只有12部分，为0x003B，表示是通知文件传送端口
            *19 - 26 和0x0035时相同
            *27. 尾部
            
            *未知类型的群消息
            *1-7. 与普通消息相同，只不过发送者QQ号相当于是群的内部ID,7部分为0x0020
            *8.   群外部ID，4字节
            *9.   群类型，1字节
            *10.  发送者QQ号，4字节
            *11.  未知的两字节，全0
            *12.  消息序号，2字节
            *13.  消息发送时间，4字节
            *14.  未知的4字节
            *15.  后面的数据的长度，2字节
            *16.  以0结尾的消息内容
            *17.  字体属性，和SendIMPacket中的相同
            *18.  尾部
            * 
            *如果是讨论组或者多人对话消息，讨论组和多人对话属于临时群，格式为
            *1 - 7 部分与普通消息相同，只不过7部分是0x002A
            *8.   父群内部ID，4字节
            *9.   群类型，1字节
            *10.  讨论组内部ID，4字节
            *11.  发送者QQ号，4字节
            *12.  未知的两字节，全0
            *13.  消息序号，2字节
            *14.  消息发送时间，4字节
            *15.  Version ID, 4字节，所谓version id，是我这里根据这个字段的意思乱编的。
            *     其作用主要是标识群信息的版本，比如一开始，群内有两个人，这个时候版本是0，然后我删
            *     除一个人，那么群的版本就要加1，于是就变成了1。然后我又加了2个人，于是版本再加2变成3，
            *     假如我再删一个人又加一个人，那么版本就要加2变成5了。为什么要加2呢，因为我做了两次操作，
            *     一次删，一次加，所以版本号加了2，你可能奇怪：为什么我不一次搞定，然后版本加1啊？因为
            *     QQ的协议就是这样，它的协议不能同时做删除和添加成员的操作，晕吧？所以我要做两次操作，
            *     也就是要发两个包才能又加人又删人，所以版本号加了2。客户端对每一个群都要保存这么一个version ID，
            *     一旦收到的消息大于我本地的version id，于是就发个包过去请求得到目前的成员列表。所以你
            *     会看到，QQ在发临时群消息的时候，成员如果变化了，会即时的反映出来，就是如此实现的了。
            *     这个id不光是在修改成员的时候才变，修改基本信息也照样变，用来表示这个群的信息修改过了。
            *16.  后面内容的长度
            *17.  Content Type, 2字节，0x0001表示纯文件，0x0002表示有自定义表情
            *18.  消息的分片数，1字节
            *19.  分片序号，1字节，从0开始
            *20.  消息id，2字节，同一条消息的不同分片id相同
            *21.  4字节，未知
            *22.  消息正文，长度 = 剩余字节数 - 包尾字体属性长度
            *23.  字体属性，和SendIMPacket中的相同
            *24.  尾部
            *
            *如果是示范群或会员创建的群发来的消息，这些群都是固定群，格式为
            *1 - 7 部分与普通消息相同，只不过7部分是0x002B
            *8.   群外部ID，4字节
            *9.   群类型，1字节
            *10.  发送者QQ号，4字节
            *11.  未知的两字节
            *12.  消息序号，2字节
            *13.  消息发送时间，4字节
            *14.  Version ID, 4字节
            *15.  后面内容的长度
            *16.  Content Type, 2字节，0x0001表示纯文件，0x0002表示有自定义表情
            *17.  消息的分片数，1字节
            *18.  分片序号，1字节，从0开始
            *19.  消息id，2字节，同一条消息的不同分片id相同
            *20.  4字节，未知
            *21.  消息正文，长度 = 剩余字节数 - 包尾字体属性长度
            *22.  字体属性，和SendIMPacket中的相同
            *23.  尾部
            *
            *如果是0x0041，可能是向服务器报告最后连接情况的包，格式为
            *1 - 27. 和0x003B时相同，差别只有命令不同，为0x0041
            *
            *如果是取消传送文件请求，格式为：
            *1 - 18. 与普通消息格式相同，差别只有12部分，为0x0049，表示是取消传送文件
            *19.     未用部分，全0，15字节
            *20.     固定字节0x65
            *21.     尾部
            *
            *如果是QQ直播消息：
            *1. 头部
            *2. 发送者QQ号，4字节，一般是10000
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，2字节，0x0018
            *8. 直播消息类型，2字节
            *9. 后面的内容长度，2字节，exclusive
            *如果8部分是0x0100，表示普通直播消息
            *10. 直播标题长度，1字节
            *11. 标题
            *12. 直播描述长度，1字节
            *13. 直播描述
            *14. 直播URL长度，1字节
            *15. 直播URL
            *16. 如果10-15部分加起来的长度没有超过9部分的值，则后面都填0
            *17. 尾部
            *如果8部分是0x0400，表示网络硬盘通知
            *10. 标题
            *11. 分隔符，1字节，0x02
            *12. 描述
            *13. 分隔符，1字节，0x02
            *14. 好友的QQ号的字符串形式
            *15. 尾部
            *
            *如果是会员登录提示
            *1. 头部
            *2. 发送者QQ号，4字节，一般是10000
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，2字节，0x0012
            *8. 未知1字节
            *9. 尾部
            *
            *如果是自定义头像变化通知
            *1. 头部
            *2. 发送者QQ号，4字节，一般是10000
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，2字节，0x0049
            *8. 头像变化的好友个数，1字节
            *9. 好友QQ号，4字节
            *10. 自定义头像最后改变的时间戳，4字节，为从1970-1-1到现在的秒数
            *11. 自定义头像的MD5值，16字节
            *12. 如果有更多好友，重复10-11部分
            *13. 尾部
            *
            *如果是好友属性改变通知
            *1. 头部
            *2. 发送者QQ号，4字节，一般是10000
            *3. 接收者QQ号，4字节
            *4. 包序号（并非我们发送时候的序号，因为这个是4字节，可能是服务器端得总序号）
            *5. 发送者IP，如果是服务器转发的，那么ip就是服务器ip， 4字节
            *6. 发送者端口，如果是服务器转发的，那么就是服务器的端口，2字节
            *7. 消息类型，2字节，0x001E
            *8. 好友QQ号，4字节
            *9. 好友属性，4字节
            *10. 未知的16字节
            *11. 尾部
            	<remark>abu 2008-02-22 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ReceiveIMPacket.GetPacketName">
            <summary>
            包的描述性名称
            <remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ReceiveIMPacket.ParseBody(System.ByteBuffer)">
            <summary>
            解析包体，从buf的开头位置解析起
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ReceiveIMPacket.ParseTempClusterIM(System.ByteBuffer)">
            <summary>解析临时组消息
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ReceiveIMPacket.ParseClusterIM(System.ByteBuffer)">
            <summary>解析群普通消息
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ReceiveIMPacket.ParseSystemMessage(System.ByteBuffer)">
            <summary>
            解析系统消息
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.In.ReceiveIMPacket.ParseNormalIM(System.ByteBuffer)">
            <summary>解析普通消息
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.RemoveSelfReplyPacket">
            <summary>
             * 删除别人好友列表中的自己的回复包，格式
            * 1. 头部
            * 2. 一个字节的应答码
            * 3. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.RequestKeyReplyPacket">
            <summary> * 请求密钥的回复包，格式为:
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 未知字节，应该是回复码，0表示成功
            * 4. 密钥，16字节
            * 5. 未知的8字节
            * 6. 未知的4字节
            * 7. 文件中转认证令牌字节长度
            * 8. 令牌
            * 9. 未知的4字节
            * 10. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.RequestLoginTokenReplyPacket">
            <summary>
            * 请求登录令牌的回复包，这个包的source字段和其他包不同，为QQ.QQ_SERVER_0000
            * 1. 头部
            * 2. 回复码，1字节，0x00表示成功
            * 3. 登录令牌长度，1字节
            * 4. 登录令牌
            * 5. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.SearchUserReplyPacket">
            <summary>
            * 搜索在线用户的回复包，格式为
            * 1. 头部
            * 2. 有两种形式
            *    第一种为搜索到了用户
            * 	  以0x1F相隔的用户数据，其中，一个用户的数据分4个域，域之间用0x1E相隔，四个域为
            * 	  i.   用户QQ号的字符串形式
            *    ii.  用户昵称
            *    iii. 用户所在地区
            *    iv.  用户的头像号码
            *    第二种是没有更多的匹配了，表示本次搜索的全部匹配已取得
            *    i. 字符串"-1"
            * 3. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.SendIMReplyPacket">
            <summary>
             * 发送消息的回复消息，格式为
            * 1. 头部
            * 2. 一个字节的应答码，0表示成功
            * 3. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.SendSMSReplyPacket">
            <summary>
             * 发送短消息的回复包，格式为：
            * 1. 头部
            * 2. 未知1字节
            * 3. 四个未知字节，全0
            * 4. 未知1字节
            * 5. 回复消息长度，1字节
            * 6. 回复消息
            * 7. 接受者中的手机号码个数，1字节
            * 8. 手机的号码，18字节，不够的部分为0
            * 9. 未知的2字节，一般为0x0000
            * 10. 回复码，1字节，表示对于这个接受者来说，短信发送的状态如何
            * 11. 附加消息长度，1字节
            * 12. 附加消息
            * 13. 未知的1字节，一般都是0x00
            * 14. 如果有更多手机号，重复8-13部分
            * 注：8-14部分只有当7部分不为0时存在
            * 15. 接受者中QQ号码的个数，1字节
            * 16. QQ号码，4字节
            * 17. 回复码，1字节，表示对于这个接受者来说，短信发送的状态如何
            * 18. 附加消息长度，1字节
            * 19. 附加消息
            * 20. 未知的1字节，一般都是0x00
            * 21. 如果有更多QQ号，重复16-20部分
            * 注：16-21部分只有当15部分不为0时才存在
            * 22. 未知的1字节，一般是0x00
            * 23. 参考消息长度，1字节
            * 24. 参考消息
            * 25. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.SignatureOpReplyPacket">
            <summary>
             * 个性签名操作的回复包
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 回复码，1字节
            * 
            * 如果2部分为0x00, 0x01，则
            * 4. 尾部
            * 
            * 如果2部分为0x02，即得到个性签名，则还有
            * 4. 下一个起始的QQ号，4字节。为这个回复包中所有QQ号的最大值加1
            * 5. QQ号，4字节
            * 6. 个性签名最后修改时间，4字节。这个修改时间的用处在于减少网络I/O，只有第一次我们需要
            *    得到所有的个性签名，以后我们只要送出个性签名，然后服务器会比较最后修改时间，修改过的
            *    才发回来
            * 7. 个性签名字节长度，1字节
            * 8. 个性签名
            * 9. 如果有更多，重复5-8部分
            * 10. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <!-- 对于成员“T:LumaQQ.NET.Packets.In.SystemNotificationPacket”忽略有格式错误的 XML 注释 -->
        <member name="P:LumaQQ.NET.Packets.In.SystemNotificationPacket.Type">
            <summary>
            消息类型
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.SystemNotificationPacket.From">
            <summary>
            从哪里来，是源的QQ号
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.SystemNotificationPacket.To">
            <summary>
            到哪里去，目的的QQ号
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.SystemNotificationPacket.Message">
            <summary>
            附加的消息，比如如果别人拒绝了你加他为好友，并说了理由，那就在这里了
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.In.SystemNotificationPacket.ReverseAdd">
            <summary>
            only for QQ_SYS_ADD_FRIEND_REQUEST_EX
            	<remark>abu 2008-02-26 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.TempSessionOpReplyPacket">
            <summary>
             * 临时会话操作回复包，格式为
            * 1. 头部
            * 2. 子命令，1字节
            * 当2部分为0x01时，格式为
            * 3. 接收者QQ号，4字节
            * 4. 回复码，1字节
            * 5. 回复消息长度，1字节
            * 6. 回复消息
            * 7. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.UnknownInPacket">
            <summary>
             * 未知的接收包
            * 1. 头部
            * 2. 包体
            * 3. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.UploadGroupFriendReplyPacket">
            <summary>
             * 上传分组好友列表的回复包，格式为
            * 1. 头部
            * 2. 应答码，0为成功，其他未知
            * 3. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.UserPropertyOpReplyPacket">
            <summary>
            * 用户属性回复包
            * 1. 头部
            * 2. 子命令，1字节
            * 当2部分为0x01时：
            * 3. 下一个包的起始位置，2字节
            * 4. 6部分的长度，1字节
            * 5. QQ号，4字节
            * 6. 用户属性字节，已知位如下
            * 	  bit30 -> 是否有个性签名
            * 7. 如果有更多好友，重复5-6部分
            * Note: 当2部分为其他值时，尚未仔细解析过后面的格式，非0x01值一般出现在TM中
            * 8. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.WeatherOpReplyPacket">
            <summary>
            * 天气操作回复包
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 回复码，1字节
            * 4. 省名称字节长度，1字节
            * 5. 省
            * 6. 市名称字节长度，1字节
            * 7. 市
            * Note: 如果4部分为0，则可以认为腾讯无法找到你要的天气预报信息，不应再往下解析
            * 8. 未知的2字节
            * 9. 市(2)名称字节长度，1字节
            * 10. 市(2)
            * Note: 不明白为什么有两个市，这两个市有时候都有内容，有时候只有一个，要注意各种情况
            * 11. 预报的天数，1字节，如果72小时预报，这个就是0x03
            * 12. 时间，4字节，天气数据的开始时间
            * 13. 天气情况字节长度，1字节
            * 14. 天气情况
            * 15. 风向字节长度，1字节
            * 16. 风向
            * 17. 最低温度，2字节，单位是摄氏度
            * 18. 最高温度，2字节，单位是摄氏度
            * Note: 要注意温度为零下时，是负数，用java处理时要注意转换
            * 19. 未知的1字节
            * 20. 提示字节长度，1字节
            * 21. 提示
            * 22. 如果还有更多数据，重复12-21部分
            * 23. 未知的2字节
            * 24. 尾部
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket">
            <summary>
            * 这个包是用来处理添加好友需要认证的情况，格式为
            * 1. 头部
            * 2. 认证的目的对象的QQ号的字符串形式
            * 3. 分隔符1字节，0x1F
            * 4. 命令，是请求还是拒绝请求，还是同意请求，1字节
            * 5. 分隔符1字节，0x1F
            * 6. 附带的消息
            * 7. 尾部
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket.#ctor(LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.AddFriendAuthResponsePacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="T:LumaQQ.NET.Packets.In.AddFriendExReplyPacket">
            <summary>
             * 这个添加好友的应答包，格式是
             * 1. 头部
             * 2. 要添加的好友的QQ号,4字节
             * 3. 回复码，1字节
             * 4. 附加条件码，1字节，比如是不是需要认证，等等
             * 注：仅当3部分为0x00时，4部分才存在
             * 5. 尾部
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.AddFriendExPacket">
            <summary>
             * 这个是添加好友的时候用的包
            * 1. 头部
            * 2. 要加的人的QQ号的字符串形式
            * 3. 尾部
            	<remark>abu 2008-02-27 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.AdvancedSearchUserPacket">
            <summary>
             * 高级搜索用户的请求包：
            * 1. 头部
            * 2. 页数，从0开始，2字节
            * 3. 在线与否，1字节，0x01表示在线，0x00表示不在线
            * 4. 是否有摄像头，1字节，0x01表示有，0x00表示无，TX QQ 2004中的处理是如果要查找
            *    有摄像头的用户，则必须查找在线用户，不知道不这样行不行
            * 5. 年龄，1字节，表示在下拉框中的索引
            * 6. 性别，1字节，表示在下拉框中的索引
            * 7. 省份，2字节，表示在下拉框中的索引
            * 8. 城市，2字节，表示在下拉框中的索引
            * 9. 尾部
            	<remark>abu 2008-02-27 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.AuthorizePacket">
            <summary>
             * 用来发送验证消息
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 要添加的QQ号，4字节
            * 4. 是否允许对方加自己为好友，1字节
            * 5. 把好友加到第几组，我的好友组是0，然后以此类推，1字节
            * 6. 验证消息字节长度，1字节
            * 7. 验证消息
            * 8. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ChangeStatusPacket">
            <summary>
             * 改变状态的包，格式为
            /// * 1. 头部
            /// * 2. 想要切换到的状态，一个字节
            /// * 3. 是否显示虚拟摄像头，4字节
            /// * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.ChangeStatusPacket.ShowFakeCam">
            <summary>
            是否显示虚拟摄像头
            	<remark>abu 2008-02-28 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterActivatePacket">
            <summary>
             * 这是激活群的请求包，激活的用处是使其能够被其他人搜索到，格式为：
            * 1. 头部
            * 2. 命令类型字节，激活是0x5
            * 3. 内部ID，4字节
            * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Out.ClusterCommandPacket.NONE">
            字体属性 
        </member>
        <member name="F:LumaQQ.NET.Packets.Out.ClusterCommandPacket.BOLD">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Out.ClusterCommandPacket.ITALIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Out.ClusterCommandPacket.UNDERLINE">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterActivateTempPacket">
            <summary> * 激活临时群：
            * 1. 头部
            * 2. 群命令类型，1字节，0x37
            * 3. 临时群类型，1字节，0x01是多人对话，0x02是讨论组
            * 4. 父群内部ID，4字节
            * 5. 临时群内部ID，4字节
            * 6. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterAuthPacket">
            <summary>
             * 发送认证信息的包，格式为：
            * 1. 头部
            * 2. 群命令类型，1字节，认证消息是0x8
            * 3. 群内部ID，4字节
            * 4. 认证消息的类型，比如是请求，拒绝还是同意，1字节
            * 5. 接收者QQ号，4字节，如果是请求加入一个群，这个字段没有用处，为全0
            * 6. 附加消息的长度，1字节
            * 7. 附加消息
            * 8. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterCommitMemberOrganizationPacket">
            <summary> * 提交成员分组情况到服务器
            * 1. 头部
            * 2. 命令，1字节，0x13
            * 3. 群内部id，4字节
            * 4. 未知1字节，0x00
            * 5. 成员QQ号，4字节
            * 6. 成员所属组织序号，1字节，没有组织时是0x00
            * 7. 如果有更多成员，重复5-6部分
            * 8. 尾部
            * 
            * 注意：不需要一次提交所有成员分组情况，如果只有个别成员的分组变动了（比如拖动操作），
            * 那么只需要提交改变的成员。所以这个操作不象修改临时群成员那样，又有添加又有删除的，
            * 可以一个包搞定了
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterCommitOrganizationPacket">
            <summary>
             * 提交组织架构到服务器
            * 1. 头部
            * 2. 命令，1字节，0x11
            * 3. 群内部id，4字节
            * 4. 组织个数，2字节
            * 5. 组织序号，1字节，从1开始
            * 6. 组织的层次关系，4字节。层次关系的格式参见ClusterCommandReplyPacket注释
            * 7. 组织名称字节长度，1字节
            * 8. 组织名称
            * 9. 如果有更多组织，重复5-8部分
            * 10. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterCreatePacket">
            <summary>
             * 创建群请求包，格式为：
            * 1. 头部
            * 2. 群命令类型，1字节，创建是0x01
            * 3. 群的类型，固定还是临时，1字节
            * 4. 是否需要认证，1字节
            * 5. 2004群分类，4字节
            * 6. 2005群分类，4字节
            * 7. 群名称长度，1字节
            * 8. 群名称
            * 9. 未知的2字节，0x0000
            * 10. 群声明长度，1字节
            * 11. 群声明
            * 12. 群简介长度，1字节
            * 13. 群简介
            * 14. 群现有成员的QQ号列表，每个QQ号4字节
            * 15. 尾部 
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterCreateTempPacket">
            <summary>
             * 创建临时群的请求包
            * 1. 头部
            * 2. 子命令类型，1字节，0x30
            * 3. 临时群类型，1字节
            * 4. 父群内部ID，4字节
            * 5. 名称长度，1字节
            * 6. 名称
            * 7. 成员QQ号，4字节
            * 8. 如果有更多成员，重复6部分
            * 10. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterDismissPacket">
            <summary>
             * 1. 头部
            * 2. 子命令，1字节
            * 3. 群内部ID，4字节
            * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterExitPacket">
            <summary> * 退出群的请求包，格式为：
            * 1. 头部
            * 2. 命令类型，退出是0x9
            * 3. 群内部ID，4字节
            * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterExitTempPacket">
            <summary>
             * 退出临时群
            * 1. 头部
            * 2. 命令，1字节，0x32
            * 3. 临时群类型，1字节，0x01是多人对话，0x02是讨论组
            * 4. 讨论组的父群内部ID，4字节，多人对话没有父群，所以这里是0
            * 5. 讨论组内部ID，4字节
            * 6. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterGetCardBatchPacket">
            <summary>
             * 批量得到群名片中的真实姓名
            * 1. 头部
            * 2. 命令，1字节，0x0F
            * 3. 群内部ID，4字节
            * 4. 未知的4字节，全0
            * 5. 起始记录位置，4字节，从0开始，为1表示从第二条记录开始得到
            * 6. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterGetCardPacket">
            <summary>
             * 得到单个成员的全部群名片信息
            * 1. 头部
            * 2. 命令，1字节，0x10
            * 3. 群内部ID，4字节
            * 4. 需要得到群名片的成员QQ号，4字节
            * 5. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterGetInfoPacket">
            <summary>
             * 1. 头部
            * 2. 群命令类型，1字节，得到信息是0x04
            * 3. 群内部ID，4字节
            * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterGetMemberInfoPacket">
            <summary> * 得到群中成员信息的请求包，格式为：
            * 1. 头部
            * 2. 命令类型，得到成员信息是0x0C
            * 3. 群内部ID，4字节
            * 4. 需要得到信息的成员QQ号，4字节
            * 5. 如果要得到多个成员的信息，重复4部分
            * 6. 尾部
            * 
            * 注意：一次最多只能得到61个成员信息，而实际操作中我们按照30个一组来得到
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterGetOnlineMemberPacket">
            <summary>
             * 得到在线成员的请求包，格式为：
            * 1. 头部
            * 2. 命令类型，得到成员信息是0x0B
            * 3. 群内部ID，4字节
            * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterGetTempInfoPacket">
            <summary>
             * 得到临时群的资料：
            * 1. 头部
            * 2. 群命令类型，1字节，0x33
            * 3. 临时群类型，1字节，0x01是多人对话，0x02是讨论组
            * 4. 父群内部ID，4字节
            * 5. 临时群内部ID，4字节
            * 5. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterJoinPacket">
            <summary>
             * 申请加入群的包，格式为：
            * 1. 头部
            * 2. 命令类型，1字节，加入群是0x07
            * 3. 群的内部ID，4字节
            * 4. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterModifyCardPacket">
            <summary> * 修改群名片请求包
            * 1. 头部 
            * 2. 子命令，1字节，0x0E
            * 3. 群内部ID，4字节
            * 4. 我的QQ号，4字节
            * 5. 真实姓名长度，1字节
            * 6. 真实姓名
            * 7. 性别索引，1字节，性别的顺序是'男', '女', '-'，所以男是0x00，等等
            * 8. 电话字符串长度，1字节
            * 9. 电话的字符串表示
            * 10. 电子邮件长度，1字节
            * 11. 电子邮件
            * 12. 备注长度，1字节
            * 13. 备注内容
            * 14. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterModifyInfoPacket">
            <summary>
             * 修改群信息的请求包，格式为：
            * 1. 头部
            * 2. 命令类型，1字节，修改群信息是0x03
            * 3. 群的内部ID，4字节
            * 4. 群类型，1字节
            * 5. 群的认证类型，1字节
            * 6. 2004群分类，4字节
            * 7. 2005群分类，4字节
            * 8. 群名称长度，1字节
            * 9. 群名称
            * 10. 未知的两字节，全0
            * 11. 群声明长度，1字节
            * 12. 群声明
            * 13. 群简介长度，1字节
            * 14. 群简介
            * 16. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterModifyMemberPacket">
            <summary>
             * 修改群成员的请求包，格式为：
            * 1. 头部
            * 2. 命令类型，1字节，修改群成员是0x02
            * 3. 群内部id，4字节
            * 4. 操作类型，删除还是添加
            * 5. 删除或添加的成员QQ号，每个4字节，如果我即删除又添加了，需要发两个包
            * 6. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterModifyTempInfoPacket">
            <summary>
             * 修改临时群资料
            * 1. 头部
            * 2. 命令，1字节, 0x34
            * 3. 临时群类型, 1字节
            * 4. 父群内部id，4字节
            * 5. 临时群内部id，4字节
            * 6. 临时群名称字节长度，1字节
            * 7. 临时群名称
            * 8. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterModifyTempMemberPacket">
            <summary>
             * 修改临时群成员列表：
            * 1. 头部
            * 2. 群命令类型，1字节，0x31
            * 3. 临时群类型，1字节，0x01是多人对话，0x02是讨论组
            * 4. 父群内部ID，4字节
            * 5. 临时群内部ID，4字节
            * 6. 操作类型，0x01是添加，0x02是删除，常量定义在QQ.java中
            * 7. 要操作的QQ号，4字节
            * 8. 如果有更多成员要操作，重复7部分
            * 9. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterSearchPacket">
            <summary>
             * 搜索群的包，格式为：
            * 1. 头部
            * 2. 命令类型，1字节，搜索群是0x06
            * 3. 查找方式，1字节，是搜索示范群还是根据ID搜索等等
            * 4. 群的外部ID，4字节，如果是搜索示范群，全0
            * 5. 尾部
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterSendIMExPacket">
            <summary>
            * 扩展固定群消息发送包，相对于已经有的固定群消息发送包来说，这个多了一些标志，
            * 同时旧的群消息发送包为了兼容性的考虑TX依然保留：
            * 1.  头部
            * 2.  子命令，1字节，0x1A
            * 3.  群内部ID，4字节
            * 4.  后面的数据的总长度，2字节
            * 5.  Content Type, 2字节，0x0001表示纯文件，0x0002表示有自定义表情
            * 6.  消息分片数，1字节。群消息分片也是最大700字节，但是这个和普通消息不一样的是：这个700包含了这些控制信息
            * 7.  分片序号，1字节，从0开始
            * 8.  消息id，2字节，同一条消息的不同分片id相同
            * 9.  4字节，未知
            * 10. 消息内容，最后一个分片追加空格
            * Note: 结尾处的空格是必须的，如果不追加空格，会导致有些缺省表情显示为乱码
            * 11. 消息的尾部，包含一些消息的参数，比如字体颜色啦，等等等等，顺序是
            *     1. 字体修饰属性，bold，italic之类的，2字节，具体的设置是
            *         i.   bit0-bit4用来表示字体大小，所以最大是32
            *         ii.  bit5表示是否bold
            *         iii. bit6表示是否italic
            *         iv.  bit7表示是否underline
            *     2. 颜色Red，1字节
            *     3. 颜色Green，1字节
            *     4. 颜色Blue，1字节
            *     5. 1个未知字节，置0先
            *     6. 消息编码，2字节，0x8602为GB，0x0000为EN，其他未知，好像可以自定义，因为服务器好像不干涉
            *     7. 可变长度的一段信息，字体名后面跟一个回车符，比如0xcb, 0xce, 0xcc, 0xe5,表示宋体
            * 12. 1字节，表示11和12部分的字节长度
            * 13. 尾部
            * 
            * 注意：只有最后一个分片有11, 12部分
            	<remark>abu 2008-02-28 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterSendTempIMPacket">
            <summary>
             * 发送临时群消息
            * 1. 头部
            * 2. 命令类型，1字节，0x35
            * 3. 群类型，1字节
            * 4. 父群内部ID，4字节
            * 5. 群内部ID，4字节
            * 6. 后面的数据的总长度，2字节
            * 7. Content Type, 2字节，0x0001表示纯文件，0x0002表示有自定义表情
            * 8. 消息分片数，1字节
            * 9. 分片序号，1字节，从0开始
            * 11. 消息id，2字节，同一条消息的不同分片id相同
            * 12. 4字节，未知
            * 13. 消息内容，最后一个分片追加空格
            * Note: 结尾处的空格是必须的，如果不追加空格，会导致有些缺省表情显示为乱码
            * 14. 消息的尾部，包含一些消息的参数，比如字体颜色啦，等等等等，顺序是
            *     1. 字体修饰属性，bold，italic之类的，2字节，具体的设置是
            *         i.   bit0-bit4用来表示字体大小，所以最大是32
            *         ii.  bit5表示是否bold
            *         iii. bit6表示是否italic
            *         iv.  bit7表示是否underline
            *     2. 颜色Red，1字节
            *     3. 颜色Green，1字节
            *     4. 颜色Blue，1字节
            *     5. 1个未知字节，置0先
            *     6. 消息编码，2字节，0x8602为GB，0x0000为EN，其他未知，好像可以自定义，因为服务器好像不干涉
            *     7. 可变长度的一段信息，字体名后面跟一个回车符，比如0xcb, 0xce, 0xcc, 0xe5,表示宋体
            * 15. 1字节，表示14和15部分的字节长度
            * 16. 尾部 
            * 
            * 注意：只有最后一个分片有14, 15, 16部分
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterSetRolePacket">
            <summary>
             * 设置成员角色的请求包
            * 1. 头部
            * 2. 群命令类型，1字节，0x1B
            * 3. 群内部ID，4字节
            * 4. 要设置角色的QQ号，4字节
            * 5. 操作码，0x00为删除管理员，0x01为设置管理员
            * 6. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterSubClusterOpPacket">
            <summary>
             * 讨论组操作请求：
            * 1. 头部
            * 2. 命令类型，1字节，0x36
            * 3. 子命令，1字节
            * 4. 根据3的不同，有：
            * 		i. 3为0x02(得到讨论组)时，4为群内部ID，4字节
            * 		ii. 3为0x01(得到多人对话)时，这里为0，4字节
            * 5. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterTransferRolePacket">
            <summary>
             * 转让角色的请求包
            * 1. 头部
            * 2. 群命令类型，1字节，0x1B
            * 3. 群内部ID，4字节
            * 4. 要转让到的QQ号，4字节
            * 5. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ClusterUpdateOrganizationPacket">
            <summary>
             * 刷新群内组织架构的请求包
            * 1. 头部
            * 2. 命令，1字节，0x12
            * 3. 群内部id，4字节
            * 4. 未知1字节，0x00
            * 5. 未知4字节，0x00000000
            * 6. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.DeleteFriendPacket">
            <summary>
            这个包用来删除一个好友，格式为:
            * 1. 头部
            * 2. 要删除的好友的QQ号的字符串形式
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.DownloadGroupFriendPacket">
            <summary>
             * 请求下载分组好友列表的消息包，格式为
            * 1. 头部
            * 2. 操作字节标志，下载为0x1
            * 3. 未知字节0x2
            * 4. 未知4字节，全0
            * 5. 起始好友号，如果这是第一个包，全0，有时候一个包还下载不完所有的好友，在这里填上起始好友号
            * 6. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.FriendDataOpPacket">
            <summary>
             * 上传下载好友备注的消息包，格式为
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 页号，1字节，从1开始，如果为0，表示此字段未用
            * 4. 操作对象的QQ号，4字节
            * 5. 未知1字节，0x00
            * 6. 以下为备注信息，一共7个域，域的顺序依次次是
            *    姓名、手机、电话、地址、邮箱、邮编、备注
            *    每个域都有一个前导字节，这个字节表示了这个域的字节长度
            * 7. 尾部
            * 
            * Note: 如果子命令是0x00(批量下载备注)，只有2，3部分
            * 		 如果子命令是0x01(上传备注)，所有部分都要，3部分未用
            *       如果子命令是0x02(删除好友)，仅保留1,2,4,7部分
            *       如果子命令是0x03(下载备注)，仅保留1,2,4,7部分
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.FriendDataOpPacket.SubCommand">
            <summary>操作类型，上传还是下载
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.FriendDataOpPacket.QQ">
            <summary> 操作的对象的QQ号
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.FriendDataOpPacket.Remark">
            <summary>好友备注对象
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.FriendDataOpPacket.Page">
            <summary>页号
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.FriendLevelOpPacket">
            <summary>
             * 这个查询QQ号等级的包，格式是
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 查询的号码，4字节
            * 4. 如果有更多好友，重复3部分
            * 5. 尾部
            * 
            * QQ的做法是一次最多请求70个。号码必须按照大小排序，本来之前不排序也可以，后来腾讯可能在服务器端动了些手脚，必须
            * 得排序了。这种顺序并没有在这个类中维护，所以是否排序目前是上层的责任，这个类假设收到的是一个排好序的用户QQ号
            * 列表
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.FriendLevelOpPacket.#ctor(System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.Packets.Out.FriendLevelOpPacket"/> class.
            </summary>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.FriendLevelOpPacket.#ctor(LumaQQ.NET.QQUser)">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.Packets.Out.FriendLevelOpPacket"/> class.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.FriendLevelOpPacket.PutBody(System.ByteBuffer)">
            <summary>
            初始化包体
            <remark>abu 2008-02-18 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.FriendLevelOpPacket.GetPacketName">
            <summary>
            Gets the name of the packet.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.FriendLevelOpPacket.Friends">
            <summary>
            Gets or sets the friends.
            </summary>
            <value>The friends.</value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.FriendLevelOpPacket.SubCommand">
            <summary>
            Gets or sets the sub command.
            </summary>
            <value>The sub command.</value>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.GetFriendListPacket">
            <summary>
             * 请求得到好友列表的包，其内容为
            * 1. 头部
            * 2. 两个字节的起始好友列表返回位置，注意这个起始位置是排序之后的
            *    加入你有9个好友，号码从10到100每隔10位一个，那么如果这两个数
            *    字的值指定为3，那10, 20, 30就不会返回了
            * 3. 返回的好友列表是否排序，1个字节，非0则排序
            * 4. 2个未知字节
            * 5. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.GetFriendListPacket.StartPosition">
            <summary>好友列表开始位置，缺省是0
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.GetOnlineOpPacket">
            <summary>
             * 获取在线好友列表的请求包，格式为
            * 1. 头部
            * 2. 1个字节，只有值为0x02或者0x03时服务器才有反应，不然都是返回0xFF
            *    经过初步的试验，发现3得到的好友都是一些系统服务，号码比如72000001到72000013，
            *    就是那些移动QQ，会员服务之类的；而2是用来得到好友的
            * 3. 起始位置，4字节。这个起始位置的含义与得到好友列表中的字段完全不同。估计是两拨人
            *    设计的，-_-!...
            *    这个起始位置需要有回复包得到，我们已经知道，在线好友的回复包一次最多返回30个好友，
            *    那么如果你的在线好友超过30个，就需要计算这个值。第一个请求包，这个字段肯定是0，后面
            *    的请求包和前一个回复包就是相关的了。具体的规则是这样的，在前一个回复包中的30个好友里面，
            *    找到QQ号最大的那个，然后把他的QQ号加1，就是下一个请求包的起始位置了！
            * 6. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.GetUserInfoPacket">
            <summary>
             * 得到用户的信息，格式为
            * 1. 头部
            * 2. 用户QQ号的字符串形式
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.GroupDataOpPacket">
            <summary>
             * 上传下载分组名字的消息包，格式为
            * 1. 头部
            * 2. 操作方式字节，如果为0x2，为上传组名，如果为0x1，为请求下载组名
            *    如果为0x2，后面的部分为
            * 	  i.   组序号，qq缺省的组，比如我的好友，序号是0，其他我们自己添加的组，从1开始，一个字节。
            *         但是要注意的是，这里不包括我的好友组，因为我的好友组是QQ的缺省组，无需上传名称
            *    ii.  16个字节的组名，如果组名长度少于16个字节，后面的填0。之所以是16个，是因为QQ的组名长度最多8个汉字
            *    iii. 如果有更多组，重复i，ii部分
            *    如果为0x1，后面的部分为
            *    i.   未知字节0x2
            *    ii.  4个未知字节，全0 
            * 3. 尾部
            * 
            * 这个包没有限制添加的组名叫什么，也没有明确规定第一个组必须是
            * 我的好友组，这些规范需要在上层程序中实现。当然也可以不一定非要第一个组是
            * 我的好友组，这些客户端的trick随便你怎么搞
            * 
            * 每次上传都必须上传所有组名
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.KeepAlivePacket">
            <summary> * Keep Alive包，这个包的格式是
            * 1. 头部
            * 2. 用户QQ号的字符串形式
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.LoginPacket">
            <summary>
             * QQ登录请求包，格式为
            * 1. 头部
            * 2. 初始密钥，16字节
            * 3. 用户的密码密钥加密一个空串得到的16字节
            * 4. 36字节的固定内容，未知含义
            * 5. 登录状态，隐身登录还是什么，1字节
            * 6. 16字节固定内容，未知含义
            * 7. 登录令牌长度，1字节
            * 8. 登录令牌
            * 9. 登录模式，1字节，目前只支持普通模式
            * 10. 未知1字节，0x40
            * 11. 后面段的个数，1字节，1个段9字节(猜测)
            * 12. 段，每次基本都是固定内容，未知含义
            * 13. 长度不足则全部填0知道符合登录包长度
            * 14. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.LogoutPacket">
            <summary>
             * Logout请求包，这个包不需要服务器的应答，格式为
            * 1. 头部
            * 2. password key
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ModifyInfoPacket">
            <summary>
             * 修改用户个人信息的请求包，格式是:
            * 1. 头部
            * 2. 旧密码，新密码以及ContactInfo里面的域，但是不包括第一项QQ号，用0x1F分隔，依次往下排，最后要用
            *    一个0x1F结尾。但是开头不需要0x1F，如果哪个字段没有，就是空
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.ModifyInfoPacket.ModifyPassword">
            <summary>标识是否有修改密码 阿不添加
            Gets or sets a value indicating whether [modify password].
            </summary>
            <value><c>true</c> if [modify password]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.PrivacyDataOpPacket">
            <summary>
             * 隐私选项操作包
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 操作，1字节，一般0x01是选择，0x00是不选
            * 4. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.ReceiveIMReplyPacket">
            <summary>
             * 收到消息之后我们发出的确认包
            * 1. 头部
            * 2. 消息发送者QQ号，4字节
            * 3. 消息接收者QQ号，4字节，也就是我
            * 4. 消息序号，4字节
            * 5. 发送者IP，4字节
            * 6. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.RemoveSelfPacket">
            <summary>
             * 把自己从某人的好友名单中删除，这种情况发生在你把一个人拖进黑名单时，格式是
            * 1. 头部
            * 2. 对方QQ号，4个字节
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.RequestKeyPacket">
            <summary>
             * 请求密钥包，格式为：
            * 1. 头部
            * 2. 密钥类型，一个字节，0x3或者0x4
            * 3. 尾部
            * 
            * 这个包用来请求得到一些操作的密钥，比如文件中转，或者语音视频之类的都有可能
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.RequestLoginTokenPacket">
            <summary>
             * 请求登录令牌的包，格式为：
            * 1. 头部
            * 2. 未知的1字节，0x00
            * 3. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.SearchUserPacket">
            <summary>
             * 搜索在线用户的包，格式为
            * 1. 头部
            * 2. 1个字节，表示搜索类型，比如搜索全部在线用户是0x31，自定义搜索是0x30
            * 3. 1字节分隔符: 0x1F
            * 4. 搜索参数
            * 	  i.  对于搜索全部在线用户的请求，是一个页号，用字符串表示，从0开始
            *    ii. 对于自定义搜索类型，是4个域，用0x1F分隔，依次是
            * 		   a. 要搜索的用户的QQ号的字符串形式
            * 		   b. 要搜索的用户的昵称
            * 		   c. 要搜索的用户的email
            *         d. 页号的字符串形式，这后面没有分隔符了，是用0x0结尾的         
            * 5. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.Out.SearchUserPacket.DELIMIT">
            分隔符 
        </member>
        <member name="F:LumaQQ.NET.Packets.Out.SearchUserPacket.NULL">
            如果字段为空，用0x2D替代，即'-'字符 
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.SendIMPacket">
            <summary>
             * 发送消息的包，格式为
            * 1. 头部
            * 2. 发送者QQ号，4个字节
            * 3. 接收者的QQ号，4个字节
            * 4. 发送者QQ版本，2字节
            * 5. 发送者QQ号，4字节
            * 6. 接收者QQ号，4个字节（奇怪，为什么要搞两个在里面）
            * 7. 发送者QQ号和session key合在一起用md5处理一次的结果，16字节
            * 8. 消息类型，2字节
            * 9. 会话ID，2字节，如果是一个操作需要发送多个包才能完成，则这个id必须一致
            * 10. 发送时间，4字节
            * 11. 发送者头像，2字节
            * 12. 字体信息，4字节，设成0x00000001吧，不懂具体意思
            * 13. 消息分片数，1字节，如果消息比较长，这里要置一个分片值，QQ缺省是700字节一个分片，这个700字节是纯消息，
            *     不包含其他部分
            * 14. 分片序号，1字节，从0开始
            * 15. 消息的id，2字节，同一条消息的不同分片id相同
            * 16. 消息方式，是发送的，还是自动回复的，1字节
            * 17. 消息内容，最后一个分片的结尾需要追加一个空格。
            * Note: 结尾处的空格是必须的，如果不追加空格，会导致有些缺省表情显示为乱码
            * 18. 消息的尾部，包含一些消息的参数，比如字体颜色啦，等等等等，顺序是
            *     1. 字体修饰属性，bold，italic之类的，2字节，已知的位是
            *         i.   bit0-bit4用来表示字体大小，所以最大是32
            *         ii.  bit5表示是否bold
            *         iii. bit6表示是否italic
            *         iv.  bit7表示是否underline
            *     2. 颜色Red，1字节
            *     3. 颜色Green，1字节
            *     4. 颜色Blue，1字节
            *     5. 1个未知字节，置0先
            *     6. 消息编码，2字节，0x8602为GB，0x0000为EN，其他未知，好像可以自定义，因为服务器好像不干涉
            *     7. 字体名，比如0xcb, 0xce, 0xcc, 0xe5表示宋体 
            * 19. 1字节，表示18和19部分的字节长度
            * 20. 包尾部
            *
            * 请求传送文件的包，这是这个包的另一种用法，其格式为
            * 1  - 14. 1到14部分均与发送消息包相同，只有第8部分不同，对于UDP的请求，8部分是0x0035，对于TCP，是0x0001
            * 15 - 17. 怀疑也和发送消息包相同，但是在这种情况中，这部分没有使用，为全0，一共11个0字节
            * 18. 传输类型，1字节，表示是传文件还是传表情
            * 19. 连接方式字节，UDP是0， TCP是3
            * 20. 4个字节的发送者外部ip地址（也就是可能为代理地址）
            * 21. 2个字节的发送者端口
            * 22. 2个字节的端口，第一个监听端口，TCP没有这个部分
            * 23. 4个字节的地址，真实IP
            * 24. 2个字节的端口，第二个而监听端口
            * 25. 空格符号做为上述信息的结束，一个字节，0x20
            * 26. 分隔符0x1F
            * 27. 要传送的文件名
            * 28. 分隔符0x1F
            * 29. 字节数的字符串形式后跟" 字节"，比如文件大小3字节的话，就是"3 字节"这个字符串的编码形式
            * 30. 尾部 
            * 
            * 同意传送文件的包，格式为
            * 1  - 24. 除了8部分，其他均与发送消息包相同。对于UDP的情况，8部分是0x0037，TCP是0x0003。
            *          UDP时，最后的本地ip和端口都是0；TCP时没有22部分
            * 25. 尾部
            * 
            * 拒绝接收文件的包，格式为
            * 1 - 19. 除了8部分，均与同意传送文件包相同。对于UDP的情况，8部分是0x0039，对于TCP，是0x0005
            * 20. 尾部
            * 
            * 通知我的IP信息，格式为
            * 1 - 24. 除了8部分，均与请求传送文件包相同。8部分是0x003B
            * 25. 尾部
            * 
            * 取消传送文件，格式为
            * 1 - 18. 除了8部分，均与请求传送文件包相同。8部分是0x0049
            * 19. 尾部
            * 
            * 要求别人主动连接我的包，格式为
            * 1 - 18. 除了8部分，均与请求传送文件包相同。8部分是0x003F
            * 19. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitPleaseConnectMe(System.ByteBuffer)">
            <summary>初始化请求对方主动连接的包
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitConnectionCanceled(System.ByteBuffer)">
            <summary>
            初始化取消发送文件包
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitNotifyFilePortUDP(System.ByteBuffer)">
            <summary>
            初始化IP信息通知包
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitSendFileRejectContent(System.ByteBuffer)">
            <summary>初始化拒绝接收文件包的其余部分
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitSendFileAcceptContent(System.ByteBuffer)">
            <summary>初始化同意接收文件包的其余部分
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitSendFileContent(System.ByteBuffer)">
            <summary>初始化请求发送文件包的其余部分
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.SendIMPacket.InitTextContent(System.ByteBuffer)">
            <summary> 初始化普通消息包的其余部分
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="buf">The buf.</param>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.SendIMPacket.TotalFragments">
            <summary>消息分片数
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.SendIMPacket.FragmentSequence">
            <summary>消息分片序号
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Packets.Out.SendIMPacket.FakeIp">
            <summary>true时表示发送一个假IP，用在如来神掌中，免得泄漏自己的IP
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.SendSMSPacket">
            <summary>
             * 发送短消息的请求包，格式为：
            * 1. 包头
            * 2. 消息序号，2字节，从0开始，用在拆分发送中
            * 3. 未知2字节，全0
            * 4. 未知4字节，全0
            * 5. 发送者昵称，最长13个字节，如果不足，则后面为0
            * 6. 未知的1字节，0x01
            * 7. 如果是免提短信，0x20，其他情况，0x00
            * 8. 短消息内容类型，1字节
            * 9. 短消息内容类型编号，4字节
            * 10. 未知的1字节，0x01
            * 11. 接受者中的手机号码个数，1字节
            * 12. 手机号码，18字节，不足的为0
            * 13. 未知的2字节
            * 14. 未知的1字节
            * 15. 如果有更多手机号，重复12-14部分
            * 注：12-15部分只在11部分不为0时存在
            * 16. 接受者中的QQ号码个数，1字节
            * 17. QQ号码，4字节
            * 18. 如果有更多QQ号码，重复17部分
            * 注：17-18部分只有在16部分不为0时存在
            * 19. 未知1字节，一般是0x03
            * 20. 短消息字节长度，2字节，如果8部分不为0，则此部分0x0000
            * 注：QQ的短信和发送者昵称加起来不能超过58个字符（英文和汉字都算是一个字符），
            * 昵称最长是13字节，所以最短也应该能发43个字符，所以可以考虑不按照QQ的做法，
            * 我们可以尽量发满86个字节。
            * 21. 短消息字节数组，消息的格式如下：
            * 		如果是普通的消息，则就是平常的字节数组而已
            *      如果有些字符有闪烁，则那些字节要用0x01括起来
            *      如果这条消息是一条长消息拆分而成的部分，则在消息字节数组前面要加一部分内容，这部分内容是
            *      [消息序号的字符串形式，从1开始] [0x2F] [总消息条数的字符串形式] [0x0A]
            * 注：21部分只有当20部分部位0时存在
            * 22. 尾部
            * 
            * 调用这个包时，message的内容必须是已经组装好的
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.SignatureOpPacket">
            <summary>
             * 个性签名操作请求包
            * 1. 头部
            * 2. 子命令，1字节
            * 
            * 根据2部分的不同
            * 为0x01时：
            * 3. 未知1字节
            * 4. 个性签名的字节长度，1字节
            * 5. 个性签名
            * 6. 尾部
            * 
            * 为0x00时，无后续内容
            * 3. 尾部
            * 
            * 为0x02时
            * 3. 未知的1字节
            * 4. 需要得到个性签名的QQ号数量，1字节
            * 5. QQ号，4字节
            * 6. 本地的个性签名修改时间，4字节
            * 7. 如果有更多QQ号，重复5-6部分
            * 8. 尾部 
            * 
            * 在得到好友的个性签名时，QQ的做法是对所有的QQ号排个序，每次最多请求33个。
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.TempSessionOpPacket">
            <summary>
             * 临时会话操作请求包，格式为
            * 1. 头部
            * 2. 子命令，1字节
            * 当2部分为0x01时，表示发送临时会话消息，格式为
            * 3. 接收者QQ号，4字节
            * 4. 未知的4字节
            * 5. 发送者昵称长度，1字节
            * 6. 发送者昵称
            * 7. Site名称长度，1字节
            * 8. Site名称
            * Note: 所谓Site就是这个临时会话发源的地点，如果用户从某个群中开始一个
            * 临时会话，Site就是群名称，这个域可以指定为任意值，没有什么影响
            * 9. 未知的1字节
            * Note: 测试发现，9部分只有为0x01或者0x02时，才能使对方收到消息
            * 10. 未知的4字节
            * 11. 后面的内容长度，2字节，exclusive
            * 12. 消息内容，结尾追加空格
            * 13. 字体属性，参加edu.tsinghua.lumaqq.qq.beans.FontStyle
            * 
            * Note: 临时会话消息在QQ中是限制发送长度的，而且不支持多条发送
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.UnknownOutPacket">
            <summary> 所有的未知协议包都由这个类来表示
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.UploadGroupFriendPacket">
            <summary>
             * 上传分组中好友列表的消息包，格式为
            * 1. 头部
            * 2. 好友的QQ号，4字节
            * 3. 好友所在的组序号，0表示我的好友组，自己添加的组从1开始
            * 4. 如果有更多好友，重复2，3部分
            * 5. 尾部
            * 
            * 并不需要每次都上传所有的好友，比如如果在使用的过程中添加了一个好友，那么
            * 可以只上传这个好友即可
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.Out.UploadGroupFriendPacket.addFriend(System.Int32,System.Int32)">
            <summary>添加好友信息
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="gIndex">Index of the g.</param>
            <param name="qqNum">The qq num.</param>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.UserPropertyOpPacket">
            <summary>
             * 用户属性操作请求包
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 起始位置，2字节
            * 4. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.Out.WeatherOpPacket">
            <summary>
             * 天气数据操作请求包
            * 1. 头部
            * 2. 子命令，1字节
            * 3. 我的IP地址，4字节
            * 4. 我的端口，2字节，查天气预报不需要，一般都是0x0000
            * 5. 尾部
            	<remark>abu 2008-02-29 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Packets.PacketHelper">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.RetriveSent(LumaQQ.NET.Packets.InPacket)">
            <summary>
            通过回复包获得请求包
            通过重载Packet的Equals方法，本判断两个不同类型的对象相等。  
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="inPacket">The in packet.</param>
            <returns>OutPacket对象，如果没有找到，返回null</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.PutSent(LumaQQ.NET.Packets.OutPacket)">
            <summary>
            缓存输出包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="outPacket">The out packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.IsReplied(LumaQQ.NET.Packets.OutPacket,System.Boolean)">
            <summary>
            这个方法检查包是否已收到，要注意的是检查是针对这个包的hash值进行的，
            * 并不是对packet这个对象，hash值的计算是在packet的hashCode中完成的，
            * 如果两个packet的序号或者命令有不同，则hash值肯定不同。
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <param name="add">if set to <c>true</c> [add].如果为true，则当这个包不存在时，添加这个包的hash，否则不添加</param>
            <returns>true如果这个包已经收到，否则false</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.IsDuplicated(LumaQQ.NET.Packets.InPacket)">
            <summary>
            检查包是否重复收到
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.ParseIn(LumaQQ.NET.ProtocolFamily,System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>
            把ByteBuffer中的内容解析成一个InPacket子类，从buf的当前位置开始解析，直到limit为止
            * 不论解析成功或者失败，要把buf的position置于length后
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.FindParser(LumaQQ.NET.ProtocolFamily,System.ByteBuffer)">
            <summary>查找一个能解析buf中内容的parser
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="supportedFamily">The supported family.</param>
            <param name="buf">The buf.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.ParseIn(LumaQQ.NET.Packets.IParser,System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary>
            把ByteBuffer中的内容解析成一个InPacket子类，从buf的当前位置开始解析length字节
            * 不论解析成功或者失败，buf的position将位于length后
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="parser">The parser.</param>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.ParseOut(LumaQQ.NET.ProtocolFamily,System.ByteBuffer,LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="supportedFamily">The supported family.</param>
            <param name="buf">The buf.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.ParseOut(LumaQQ.NET.Packets.IParser,System.ByteBuffer,System.Int32,LumaQQ.NET.QQUser)">
            <summary> 把ByteBuffer中的内容解析成一个InPacket子类，从buf的当前位置开始解析，直到limit为止
            * 不论解析成功或者失败，要把buf的position置于length后
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="parser">The parser.</param>
            <param name="buf">The buf.</param>
            <param name="length">The length.</param>
            <param name="user">The user.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHelper.Relocate(LumaQQ.NET.ProtocolFamily,System.ByteBuffer)">
            <summary> 把position设置到下一个包的起始位置处。一般当某段数据没有parser
            * 可以时，调用此方法跳过这段数据
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="supportedFamily">The supported family.</param>
            <param name="buf">The buf.</param>
            <returns>true表示重定位成功，false表示失败或者推迟重定位</returns>
        </member>
        <!-- 对于成员“T:LumaQQ.NET.Packets.PacketHistory”忽略有格式错误的 XML 注释 -->
        <member name="F:LumaQQ.NET.Packets.PacketHistory.hash">
            <summary>
            用于重复包检测的链接哈希表
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.PacketHistory.sent">
            <summary>
            用于请求的哈希表
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Packets.PacketHistory.THRESHOLD">
            <summary>
            阈值，超过时清理hash中的数据
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHistory.Check(LumaQQ.NET.Packets.Packet,System.Boolean)">
            <summary>
            这个方法检查包是否已收到，要注意的是检查是针对这个包的hash值进行的，
            并不是对packet这个对象，hash值的计算是在packet的hashCode中完成的，
            如果两个packet的序号或者命令有不同，则hash值肯定不同。
            <remark>abu 2008-02-20 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <param name="add">if set to <c>true</c> 如果为true，则当这个包不存在时，添加这个包的hash，否则不添加.</param>
            <returns>true如果这个包已经收到，否则false</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHistory.Check(System.Int32,System.Boolean)">
            <summary>检查指定的hash值是否已经存在
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="hashValue">The hash value.</param>
            <param name="add">if set to <c>true</c> 表示如果不存在则添加这个哈希值.</param>
            <returns>true表示已经存在</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHistory.Check(System.Object,System.Boolean)">
            <summary>
             这个方法检查包是否已收到，要注意的是检查是针对这个包的hash值进行的，
             并不是对packet这个对象，hash值的计算是在packet的hashCode中完成的，
             如果两个packet的序号或者命令有不同，则hash值肯定不同。
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <param name="add">if set to <c>true</c> [add].</param>
            <returns>true表示这个包已经收到，否则false</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHistory.PutSent(LumaQQ.NET.Packets.OutPacket)">
            <summary>
            把请求推入哈希表
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHistory.RetrieveSent(LumaQQ.NET.Packets.InPacket)">
            <summary>
            返回这个回复包对应的请求包
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="packet">The packet.</param>
            <returns>你的请求包</returns>
        </member>
        <member name="M:LumaQQ.NET.Packets.PacketHistory.Clear">
            <summary>清空包监视缓冲区
            	<remark>abu 2008-02-20 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.PrivateManager">
            <summary>
            个人资料管理
            </summary>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.PrivateManager"/> class.
            </summary>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.#ctor(LumaQQ.NET.QQClient)">
            <summary>
            Initializes a new instance of the <see cref="T:LumaQQ.NET.PrivateManager"/> class.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.GetWeather">
            <summary>请求自己这里的天气预报
            Gets the weather.
            </summary>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.ModifyPassword(System.String,System.String)">
            <summary>修改QQ密码
            Modifies the password.
            </summary>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.ModifyInfo(LumaQQ.NET.Entities.ContactInfo)">
            <summary>修改个人信息
            Modifies the info.
            </summary>
            <param name="contactInfo">The contact info.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.ModifyInfo(System.String,System.String,LumaQQ.NET.Entities.ContactInfo)">
            <summary>修改个人信息或密码
            Modifies the info.
            </summary>
            <param name="oldPassword">The old password.老密码，如果不修改密码，设成null</param>
            <param name="newPassword">The new password.新密码，如果不修改密码，设成null</param>
            <param name="contactInfo">The contact info.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.ModifySignature(System.String)">
            <summary>修改个性签名
            Modifies the signature.
            </summary>
            <param name="sig">The sig.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.DeleteSignature">
            <summary>删除个性签名
            Deletes the signature.
            </summary>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.SetSearchMeByQQOnly(System.Boolean)">
            <summary>设置是否只能通过QQ号码找到我
            Searches me by QQ only.
            </summary>
            <param name="only">if set to <c>true</c> [only].</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.ShareGeography(System.Boolean)">
            <summary>共享我的地址位置
            Shares the geography.
            </summary>
            <param name="shar">if set to <c>true</c> [shar].</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnGetWeatherSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.WeatherOpReplyPacket,LumaQQ.NET.Packets.Out.WeatherOpPacket})">
            <summary>
            Raises the <see cref="E:WeatherSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.WeatherOpReplyPacket,LumaQQ.NET.Packets.Out.WeatherOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnGetWeatherFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.WeatherOpReplyPacket,LumaQQ.NET.Packets.Out.WeatherOpPacket})">
            <summary>
            Raises the <see cref="E:GetWeatherFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.WeatherOpReplyPacket,LumaQQ.NET.Packets.Out.WeatherOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnModifyInfoSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ModifyInfoReplyPacket,LumaQQ.NET.Packets.Out.ModifyInfoPacket})">
            <summary>
            Raises the <see cref="E:ModifyInfoSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ModifyInfoReplyPacket,LumaQQ.NET.Packets.Out.ModifyInfoPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnModifyInfoFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.ModifyInfoReplyPacket,LumaQQ.NET.Packets.Out.ModifyInfoPacket})">
            <summary>
            Raises the <see cref="E:ModifyInfoFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.ModifyInfoReplyPacket,LumaQQ.NET.Packets.Out.ModifyInfoPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnModifySignatureSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket})">
            <summary>
            Raises the <see cref="E:ModifySignatureSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnModifySignatureFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket})">
            <summary>
            Raises the <see cref="E:ModifySignatureFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnDeleteSignatureSuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket})">
            <summary>
            Raises the <see cref="E:DeleteSignatureSuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnDeleteSignatureFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket})">
            <summary>
            Raises the <see cref="E:DeleteSignatureFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.SignatureOpReplyPacket,LumaQQ.NET.Packets.Out.SignatureOpPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnSetSearchMeByQQOnlySuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.Out.PrivacyDataOpPacket})">
            <summary>
            Raises the <see cref="E:SetSearchMeByQQOnlySuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnSetSearchMeByQQOnlyFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.Out.PrivacyDataOpPacket})">
            <summary>
            Raises the <see cref="E:SetSearchMeByQQOnlyFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnSetShareGeographySuccessed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.Out.PrivacyDataOpPacket})">
            <summary>
            Raises the <see cref="E:SetShareGeographySuccessed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="M:LumaQQ.NET.PrivateManager.OnSetShareGeographyFailed(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.Out.PrivacyDataOpPacket})">
            <summary>
            Raises the <see cref="E:SetShareGeographyFailed"/> event.
            </summary>
            <param name="e">The <see cref="!:LumaQQ.NET.Events.QQEventArgs&lt;LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket,LumaQQ.NET.Packets.In.PrivacyDataOpReplyPacket&gt;"/> instance containing the event data.</param>
        </member>
        <member name="P:LumaQQ.NET.PrivateManager.QQClient">
            <summary>
            Gets or sets the QQ client.
            </summary>
            <value>The QQ client.</value>
        </member>
        <member name="P:LumaQQ.NET.PrivateManager.QQUser">
            <summary>
            Gets or sets the QQ user.
            </summary>
            <value>The QQ user.</value>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.GetWeatherSuccessed">
            <summary>请求天气预报成功
            Occurs when [get weather successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.GetWeatherFailed">
            <summary>请求天气预报失败
            Occurs when [get weather failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.ModifyInfoSuccessed">
            <summary>个人信息修改成功事件
            Occurs when [modify info successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.ModifyInfoFailed">
            <summary>个人信息修改失败事件
            Occurs when [modify info failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.ModifySignatureSuccessed">
            <summary>修改个性签名成功
            Occurs when [modify signature successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.ModifySignatureFailed">
            <summary>修改个性签名失败
            Occurs when [modify signature failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.DeleteSignatureSuccessed">
            <summary>删除个性签名成功
            Occurs when [delete signature successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.DeleteSignatureFailed">
            <summary>删除个性签名失败
            Occurs when [delete signature failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.SetSearchMeByQQOnlySuccessed">
            <summary>成功设置只能通过好友找到选项
            Occurs when [set search me by QQ only successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.SetSearchMeByQQOnlyFailed">
            <summary>设置只能通过好友找到选项不成功
            Occurs when [set search me by QQ only failed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.SetShareGeographySuccessed">
            <summary>设置共享地理位置选项成功
            Occurs when [set share geography successed].
            </summary>
        </member>
        <member name="E:LumaQQ.NET.PrivateManager.SetShareGeographyFailed">
            <summary>设置共享地理位置选项失败
            Occurs when [set share geography failed].
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ProxyType">
            <summary>
            代理类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProxyType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProxyType.Socks4">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProxyType.Socks5">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumaQQ.NET.QQClient">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.QQClient.#ctor(LumaQQ.NET.QQUser)">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:LumaQQ.NET.QQClient.Login(System.String,System.Int32)">
            <summary>
            登录
            	<remark>abu 2008-03-06 </remark>
            </summary>
            <param name="server">The server.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:LumaQQ.NET.QQClient.Login">
            <summary>
            	<remark>abu 2008-03-08 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.QQClient.KeepAlive">
            <summary>
            保持登录状态
            	<remark>abu 2008-03-10 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.QQClient.OnError(LumaQQ.NET.Events.QQEventArgs{LumaQQ.NET.Packets.ErrorPacket,LumaQQ.NET.Packets.OutPacket})">
            <summary>
            Called when [error].
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:LumaQQ.NET.QQClient.GenerateCrashReport(System.Exception,LumaQQ.NET.Packets.Packet)">
            <summary>
            在程序出现运行时异常时产生一个崩溃报告
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <param name="e">The e.</param>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="P:LumaQQ.NET.QQClient.LoginServerHost">
            <summary>
            服务器地址
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.LoginPort">
            <summary>
            登录端口
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.IsLogon">
            <summary>
            是否已登录
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.LoginRedirect">
            <summary>
            经过重定向登录
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.ConnectionManager">
            <summary>
            连接管理
            	<remark>abu 2008-03-06 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.PacketManager">
            <summary>包管理
            Gets or sets the packet manager.
            </summary>
            <value>The packet manager.</value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.LoginManager">
            <summary>登录管理
            Gets or sets the login manager.
            </summary>
            <value>The login manager.</value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.MessageManager">
            <summary>消信管理
            Gets or sets the message manager.
            </summary>
            <value>The message manager.</value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.FriendManager">
            <summary>好友管理
            Gets or sets the friend manager.
            </summary>
            <value>The friend manager.</value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.PrivateManager">
            <summary>个人资料管理
            Gets or sets the private manager.
            </summary>
            <value>The private manager.</value>
        </member>
        <member name="P:LumaQQ.NET.QQClient.Proxy">
            <summary>
            使用的代理服务器
            	<remark>abu 2008-03-05 </remark>
            </summary>
            <value></value>
        </member>
        <member name="E:LumaQQ.NET.QQClient.Error">
            <summary>
            错误事件
            	<remark>abu 2008-03-06 </remark>
            </summary>
        </member>
        <member name="T:LumaQQ.NET.QQGlobal">
            <summary>
             * 定义一些QQ用到的常量，常量的命名方式经过调整，统一为
             * QQ_[类别]_[名称]
             * 
             * 比如表示长度的常量，为QQ_LENGTH_XXXXX
             * 表示最大值的常量，为QQ_MAX_XXXX
            	<remark>abu 2008-02-16 </remark>
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_PACKET_SIZE">
            <summary>
            包最大大小
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_CHARSET_DEFAULT">
            <summary>
             QQ缺省编码方式
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_KEY">
            <summary>
             密钥长度 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_LOGIN_DATA">
            <summary>
            登陆信息长度
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_CLIENT_VERSION">
            <summary>
            程序缺省使用的客户端版本号
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_CLIENT_VERSION_0E1B">
            <summary>
            客户端版本号标志 - QQ2005 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SEND_TIME_NOACK_PACKET">
            <summary>
            不需要确认的包的发送次数，这个值应该是随便的，由于QQ Logout包发了4次，所以我选4 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_HEADER_BASIC_FAMILY">
            <summary>
            QQ基本协议族包头 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_HEADER_P2P_FAMILY">
            QQ P2P协议族 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_HEADER_03_FAMILY">
            03协议族包头 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_HEADER_04_FAMILY">
            04开头的协议族，未知含义，文件中转包有用到过 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_HEADER_05_FAMILY">
            05协议族包头 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_TAIL_BASIC_FAMILY">
            QQ基本协议族包尾 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_TAIL_05_FAMILY">
            05系列协议族包尾 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_BASIC_FAMILY_IN_HEADER">
            基本协议族输入包的包头长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_BASIC_FAMILY_OUT_HEADER">
            基本协议族输出包的包头长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_BASIC_FAMILY_TAIL">
            基本协议族包尾长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_FTP_FAMILY_HEADER">
            FTP协议族包头长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_05_FAMILY_HEADER">
            05协议族包头长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_05_FAMILY_TAIL">
            05协议族包尾长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_DISK_FAMILY_IN_HEADER">
            网络硬盘协议族输入包包头长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LENGTH_DISK_FAMILY_OUT_HEADER">
            网络硬盘协议族输出包包头长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SERVER_VERSION_0100">
            <summary>
            服务器端版本号 (不一定)
            不一定真的是表示服务器端版本号，似乎和发出的包不同，这个有其他的含义，
            感觉像是包的类型标志
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_ROLE_ADMIN">
            群成员角色标志位 - 管理员 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_ROLE_STOCKHOLDER">
            群成员角色标志位 - 股东 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_CAM">
            有摄像头 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_BIND">
            绑定了手机 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_MOBILE">
            移动QQ用户 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_MEMBER">
            会员 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_TM">
            TM登录 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_POSITION_FRIEND_LIST_START">
            好友列表从第一个好友开始 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_POSITION_FRIEND_LIST_END">
            好友列表已经全部得到 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_POSITION_ONLINE_LIST_START">
            在线好友列表从第一个好友开始 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_POSITION_ONLINE_LIST_END">
            在线好友列表已经全部得到 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_POSITION_USER_PROPERTY_START">
            用户属性列表从第一个好友开始 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_POSITION_USER_PROPERTY_END">
            用户属性列表结束 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_SMS_SENDER_NAME">
            短消息发送者最大名称字节长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_SMS_MOBILE_LENGTH">
            接受者手机号最大长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_SMS_LENGTH">
            短信发送时，发送者名称和短信内容的字符数之和的最大值 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SMS_MODE_HAND_FREE">
            发送模式 - 免提短信 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SMS_MODE_NORMAL">
            发送模式 - 普通 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SMS_CONTENT_NORMAL">
            短消息内容 - 普通短消息 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SMS_CONTENT_LOVE_WORD">
            短消息内容 - 言语传情 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SMS_CONTENT_PICTURE">
            短消息内容 - 精美图片 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_SMS_CONTENT_RING">
            短消息内容 - 悦耳铃声 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LIVE_IM_TYPE_DISK">
            网络硬盘通知 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_HAS_SIGNATURE">
            有个性签名 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_FLAG_HAS_CUSTOM_HEAD">
            有自定义头像 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_CAM_SHOW_FAKE">
            显示虚拟摄像头 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_CAM_DONT_SHOW_FAKE">
            隐藏虚拟摄像头 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_GROUP_NAME">
            QQ分组的名称最大字节长度，注意一个汉字是两个字节 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_NAME_LENGTH">
            QQ昵称的最长长度 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_COUNT_DEFAULT_FACE">
            QQ缺省表情个数 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_COUNT_GET_USER_INFO_FIELD">
            得到用户信息的回复包字段个数 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_COUNT_MODIFY_USER_INFO_FIELD">
            <summary>
            修改用户信息的请求包字段个数，比实际的多1，最开始的QQ号不包括
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_COUNT_REMARK_FIELD">
            用户备注信息的字段个数 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_PORT_UDP">
            QQ UDP缺省端口 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_PORT_TCP">
            QQ TCP缺省端口 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_PORT_HTTP">
            使用HTTP代理时连接QQ服务器的端口 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_TIMEOUT_SEND">
            单位: ms 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_MAX_RESEND">
            最大重发次数 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_INTERVAL_KEEP_ALIVE">
            Keep Alive包发送间隔，单位: ms 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LOGIN_16_51">
            QQ登录包中16到51字节的固定内容 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LOGIN_53_68">
            QQ登录包中53到68字节的固定内容 
        </member>
        <member name="F:LumaQQ.NET.QQGlobal.QQ_LOGIN_SEGMENTS">
            QQ登录包中的未知固定内容 
        </member>
        <member name="T:LumaQQ.NET.OpenContact">
            <summary>
            联系方法的可见类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.OpenContact.Open">
            <summary>
            完全公开 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.OpenContact.Friends">
            <summary>
            仅好友可见
            </summary>
        </member>
        <member name="F:LumaQQ.NET.OpenContact.Close">
            <summary>
            完全保密 
            </summary>
        </member>
        <member name="T:LumaQQ.NET.AuthType">
            <summary>
            认证类型，加一个人为好友时是否需要验证等等
            </summary>
        </member>
        <member name="F:LumaQQ.NET.AuthType.No">
            <summary>
            不需认证
            </summary>
        </member>
        <member name="F:LumaQQ.NET.AuthType.Need">
            <summary>
            需要认证
            </summary>
        </member>
        <member name="F:LumaQQ.NET.AuthType.Reject">
            <summary>
            对方拒绝加好友
            </summary>
        </member>
        <member name="T:LumaQQ.NET.LoginMode">
            <summary>
            登录模式
            </summary>
        </member>
        <member name="F:LumaQQ.NET.LoginMode.Normal">
            <summary>
            正常
            </summary>
        </member>
        <member name="F:LumaQQ.NET.LoginMode.Hidden">
            <summary>
            隐身
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ProtocolFamily">
            <summary>
            协议族标识
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProtocolFamily.Basic">
            <summary>
            基本协议族
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProtocolFamily._05">
            <summary>
            05开头的协议族，目前发现的用途
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProtocolFamily._03">
            <summary>
            03开头的协议族，目前发现的用途
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProtocolFamily.Disk">
            <summary>
            Disk协议族，用来访问网络硬盘
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ProtocolFamily.All">
            <summary>
            所有协议族
            </summary>
        </member>
        <member name="T:LumaQQ.NET.QQCommand">
            <summary>
            命令常量
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Logout">
            <summary>
             登出
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Keep_Alive">
            <summary>
            保持在线状态
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Modify_Info">
            <summary>
            修改自己的信息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Search_User">
            <summary>
            查找用户
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Get_UserInfo">
            <summary>
             得到好友信息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Delete_Friend">
            <summary>
            删除一个好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Add_Friend_Auth">
            <summary>
            发送验证信息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Change_Status">
            <summary>
            改变自己的在线状态
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Ack_Sys_Msg">
            <summary>
            确认收到了系统消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Send_IM">
            <summary>
            发送消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Recv_IM">
            <summary>
            接收消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Remove_Self">
            <summary>
            把自己从对方好友名单中删除
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Request_Key">
            <summary>
            请求一些操作需要的密钥，比如文件中转，视频也有可能 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Login">
            <summary>
            登陆
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Get_Friend_List">
            <summary>
            得到好友列表 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Get_Online_OP">
            <summary>
            得到在线好友列表
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Send_SMS">
            <summary>
            发送短消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Cluster_Cmd">
            <summary>
            群相关命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Test">
            <summary>
            测试连接
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Group_Data_OP">
            <summary>
            分组数组操作
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Upload_Group_Friend">
            <summary>
            上传分组中的好友QQ号列表 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Friend_Data_OP">
            <summary>
            好友相关数据操作
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Download_Group_Friend">
            <summary>
            下载分组中的好友QQ号列表 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Friend_Level_OP">
            <summary>
            好友等级信息相关操作
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Privacy_Data_OP">
            <summary>
            隐私数据操作 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Cluster_Data_OP">
            <summary>
            群数据操作命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Advanced_Search">
            <summary>
            好友高级查找 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Request_Login_Token">
            <summary>
            请求登录令牌
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.User_Property_OP">
            <summary>
            用户属性操作 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Temp_Session_OP">
            <summary>
            临时会话操作
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Signature_OP">
            <summary>
            个性签名的操作 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Recv_Msg_Sys">
            <summary>
            接收到系统消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Recv_Msg_Friend_Change_Status">
            <summary>
            好友改变状态 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Weather_OP">
            <summary>
            天气操作
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Add_Friend_Ex">
            <summary>
            QQ2005使用的添加好友命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Authorize">
            <summary>
            发送验证消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQCommand.Unknown">
            <summary>
            未知命令，调试用途 
            </summary>
        </member>
        <member name="T:LumaQQ.NET._05Command">
            <summary>
             命令常量
            </summary>
        </member>
        <member name="F:LumaQQ.NET._05Command._05_REQUEST_AGENT">
            <summary>
             请求中转
            </summary>
        </member>
        <member name="F:LumaQQ.NET._05Command._05_REQUEST_FACE">
            <summary>
            请求得到自定义表情
            </summary>
        </member>
        <member name="F:LumaQQ.NET._05Command._05_TRANSFER">
            <summary>
            开始传送
            </summary>
        </member>
        <member name="F:LumaQQ.NET._05Command._05_REQUEST_BEGIN">
            <summary>
            请求开始传送
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ReplyCode">
            <summary>
            回复常量
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.OK">
            <summary>
            通用常量，操作成功
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.ADD_FRIEND_ALREADY">
            <summary>
            对方已经是我的好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.REQUEST_LOGIN_TOKEN_OK">
            <summary>
            请求登录令牌成功
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.LOGIN_REDIRECT">
            <summary>
            登录信息-重定向
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.LOGIN_FAIL">
            <summary>
            登录信息-登录失败
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.CHANGE_STATUS_OK">
            <summary>
            改变在线状态成功
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.ADD_FRIEND_AUTH_OK">
            <summary>
            发送认证消息成功
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.ADVANCED_SEARCH_END">
            <summary>
            高级搜索结束，没有更多数据
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.REQUEST_AGENT_REDIRECT">
            <summary>
            申请中转服务器，重定向
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.REQUEST_AGENT_OK">
            <summary>
            申请中转服务器成功
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyCode.REQUEST_AGENT_TOO_LONG">
            <summary>
            要发送的图片太大
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ClusterCommand">
            <summary>
            群操作命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.CREATE_CLUSTER">
            <summary>
            创建群
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.MODIFY_MEMBER">
            <summary>
            修改群成员
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.MODIFY_CLUSTER_INFO">
            <summary>
            修改群资料
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_CLUSTER_INFO">
            <summary>
            得到群资料
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.ACTIVATE_CLUSTER">
            <summary>
            激活群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.SEARCH_CLUSTER">
            <summary>
            搜索群
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.JOIN_CLUSTER">
            <summary>
            加入群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.JOIN_CLUSTER_AUTH">
            <summary>
            加入群的验证消息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.EXIT_CLUSTER">
            <summary>
            退出群
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_ONLINE_MEMBER">
            <summary>
            得到在线成员
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_MEMBER_INFO">
            <summary>
            得到成员资料 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.MODIFY_CARD">
            <summary>
            修改群名片
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_CARD_BATCH">
            <summary>
            批量得到成员群名片中的真实姓名
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_CARD">
            <summary>
            得到某个成员的群名片
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.COMMIT_ORGANIZATION">
            <summary>
            提交组织架构到服务器 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.UPDATE_ORGANIZATION">
            <summary>
            从服务器获取组织架构
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.COMMIT_MEMBER_ORGANIZATION">
            <summary>
            提交成员分组情况到服务器
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_VERSION_ID">
            <summary>
            得到各种version id
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.SEND_IM_EX">
            <summary>
            扩展格式的群消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.SET_ROLE">
            <summary>
            设置成员角色
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.TRANSFER_ROLE">
            <summary>
            转让自己的角色给他人
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.DISMISS_CLUSTER">
            <summary>
            解散群，如果自己是群的创建者，则使用这个命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.CREATE_TEMP">
            <summary>
            创建临时群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.MODIFY_TEMP_MEMBER">
            <summary>
            修改临时群成员列表 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.EXIT_TEMP">
            <summary>
            退出临时群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.GET_TEMP_INFO">
            <summary>
            得到临时群资料 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.MODIFY_TEMP_INFO">
            <summary>
            修改临时群资料
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.SEND_TEMP_IM">
            <summary>
            发送临时群消息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.SUB_CLUSTER_OP">
            <summary>
            子群操作
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterCommand.ACTIVATE_TEMP">
            <summary>
            激活临时群 
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ClusterType">
            <summary>
            群类型常量
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterType.PERMANENT">
            <summary>
            固定群
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterType.DIALOG">
            <summary>
            多人对话
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterType.SUBJECT">
            <summary>
            讨论组
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Gender.GG">
            <summary>
            男
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Gender.MM">
            <summary>
            女
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Gender.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FriendType">
            <summary>
            这两个常量用在下载好友分组时
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendType.IS_FRIEND">
            <summary>
             号码代表一个用户
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendType.IS_CLUSTER">
            <summary>
            号码是一个群
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FriendOpSubCmd">
            <summary>
             好友操作子命令常量，服务于命令0x003E 。
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendOpSubCmd.BATCH_DOWNLOAD_FRIEND_REMARK">
            <summary>
            批量下载好友备注
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendOpSubCmd.UPLOAD_FRIEND_REMARK">
            <summary>
             上传好友备注
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendOpSubCmd.REMOVE_FRIEND_FROM_LIST">
            <summary>
            添加好友到列表中
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendOpSubCmd.DOWNLOAD_FRIEND_REMARK">
            <summary>
            下载好友备注
            </summary>
        </member>
        <member name="T:LumaQQ.NET.QQStatus">
            <summary>
            在线状态
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQStatus.ONLINE">
            <summary>
            在线
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQStatus.OFFLINE">
            <summary>
            离线
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQStatus.AWAY">
            <summary>
            离开
            </summary>
        </member>
        <member name="F:LumaQQ.NET.QQStatus.HIDDEN">
            <summary>
            隐身
            </summary>
        </member>
        <member name="T:LumaQQ.NET.GroupSubCmd">
            <summary>
            组操作子命令常量，服务于命令0x003C
            </summary>
        </member>
        <member name="F:LumaQQ.NET.GroupSubCmd.DOWNLOAD">
            <summary>
            下载组名 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.GroupSubCmd.UPLOAD">
            <summary>
            上传组名
            </summary>
        </member>
        <member name="T:LumaQQ.NET.Charset">
            <summary>
            消息编码，好像可以自己胡乱定义
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Charset.GB">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Charset.EN">
            <summary>
            
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Charset.BIG5">
            <summary>
            
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FileConnectMode">
            <summary>
            请求传送文件消息中的一个标志字节，传输类型之后那个，意思不明，姑且这样
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FileConnectMode.UDP">
            <summary>
            UDP，可能不是这意思
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FileConnectMode.DIRECT_UDP">
            <summary>
            直接UDP，可能不是这意思
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FileConnectMode.TCP">
            <summary>
            TCP，可能不是这意思
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FileConnectMode.DIRECT_TCP">
            <summary>
            直接TCP，可能不是这意思 
            </summary>
        </member>
        <member name="T:LumaQQ.NET.TransferType">
            <summary>
            传输类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.TransferType.FILE">
            <summary>
            传输文件
            </summary>
        </member>
        <member name="F:LumaQQ.NET.TransferType.FACE">
            <summary>
            传输自定义表情
            </summary>
        </member>
        <member name="T:LumaQQ.NET.RecvSource">
            <summary>
             消息类型，就是ReceiveIMHeader中的类型，对于有些类型，我们做为通知来处理
             而不是显示在消息窗口中，比如请求加入，验证之类的消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.FRIEND">
            <summary>
            来自好友的消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.STRANGER">
            <summary>
            来自陌生人的消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.BIND_USER">
            <summary>
            手机短消息 - 普通绑定用户
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.MOBILE">
            <summary>
            手机短消息 - 普通手机 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.MEMBER_LOGIN_HINT">
            <summary>
            会员登录提示，这个消息基本没内容，就是用来提醒你是会员，可以显示一个窗口来告诉你上次登录时间和ip
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.MOBILE_QQ">
            <summary>
            手机短消息 - 移动QQ用户 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.MOBILE_QQ_2">
            <summary>
            手机短消息 - 移动QQ用户(使用手机号描述)
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.QQLIVE">
            <summary>
            QQ直播消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.PROPERTY_CHANGE">
            <summary>
            好友属性改变通知
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.TEMP_SESSION">
            <summary>
            临时会话消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.UNKNOWN_CLUSTER">
            <summary>
            未知类型的群消息，在2003时是普通群消息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.ADDED_TO_CLUSTER">
            <summary>
            通知我被加入到一个群，这个群先前已经建立，我是后来被加的
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.DELETED_FROM_CLUSTER">
            <summary>
            我被踢出一个群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.REQUEST_JOIN_CLUSTER">
            <summary>
            有人请求加入群
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.APPROVE_JOIN_CLUSTER">
            <summary>
            同意对方加入群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.REJECT_JOIN_CLUSTER">
            <summary>
            拒绝对方加入群 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.CREATE_CLUSTER">
            <summary>
            通知我被加入到一个群，我是在群被创建的时候就被加的 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.TEMP_CLUSTER">
            <summary>
            临时群消息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.CLUSTER">
            <summary>
            固定群消息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.CLUSTER_NOTIFICATION">
            <summary>
            群通知 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.SYS_MESSAGE">
            <summary>
            收到的系统消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.SIGNATURE_CHANGE">
            <summary>
            收到个性签名改变通知 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RecvSource.CUSTOM_HEAD_CHANGE">
            <summary>
            收到自定义头像变化通知
            </summary>
        </member>
        <member name="T:LumaQQ.NET.NormalIMType">
            <summary>
            消息类型，这个类型比上面的类型又再低一级，他们基本从属于QQ_RECV_IM_FRIEND
            所以他们是normalIMHeader中的类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.TEXT">
            <summary>
            普通文件消息 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.TCP_REQUEST">
            <summary>
            一个TCP连接请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.ACCEPT_TCP_REQUEST">
            <summary>
            接收TCP连接请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.REJECT_TCP_REQUEST">
            <summary>
            拒绝TCP连接请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.UDP_REQUEST">
            <summary>
            UDP连接请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.ACCEPT_UDP_REQUEST">
            <summary>
            接受UDP连接请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.REJECT_UDP_REQUEST">
            <summary>
            拒绝UDP连接请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.NOTIFY_IP">
            <summary>
            通知文件传输端口
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.ARE_YOU_BEHIND_FIREWALL">
            <summary>
            请求对方主动连接
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.ARE_YOU_BEHIND_PROXY">
            <summary>
            未知含意
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.YES_I_AM_BEHIND_PROXY">
            <summary>
            未知含意，0x0041的回复
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.NOTIFY_FILE_AGENT_INFO">
            <summary>
            通知文件中转服务器信息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.NormalIMType.REQUEST_CANCELED">
            <summary>
            取消TCP或者UDP连接请求
            </summary>
        </member>
        <member name="T:LumaQQ.NET.IMFrom">
            <summary>
            消息来源，主要在ReceiveIMPacket中使用，和协议关系不大
            </summary>
        </member>
        <member name="F:LumaQQ.NET.IMFrom.USER">
            <summary>
            来自好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.IMFrom.SYS">
            <summary>
            来自系统
            </summary>
        </member>
        <member name="F:LumaQQ.NET.IMFrom.CLUSTER">
            <summary>
            来自群
            </summary>
        </member>
        <member name="F:LumaQQ.NET.IMFrom.SMS">
            <summary>
            来自短消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.IMFrom.TEMP_SESSION">
            <summary>
            来自临时会话
            </summary>
        </member>
        <member name="T:LumaQQ.NET.SignatureSubCmd">
            <summary>
            子命令常量，用于子命令0x0067
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SignatureSubCmd.MODIFY">
            <summary>
            修改个性签名
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SignatureSubCmd.DELETE">
            <summary>
            删除个性签名
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SignatureSubCmd.GET">
            <summary>
            得到个性签名
            </summary>
        </member>
        <member name="T:LumaQQ.NET.SystemMessageType">
            <summary>
            系统通知的类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.BEING_ADDED">
            <summary>
            自己被别人加为好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.ADD_FRIEND_REQUEST">
            <summary>
            对方请求加你为好友
            当对方不使用0x00A8命令发送认证消息，才会收到此系统通知
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.ADD_FRIEND_APPROVED">
            <summary>
            同意对方加自己为好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.ADD_FRIEND_REJECTED">
            <summary>
            拒绝对方加自己为好友 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.ADVERTISEMENT">
            <summary>
            广告 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.UPDATE_HINT">
            <summary>
            未知含意 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.BEING_ADDED_EX">
            <summary>
            对方把你加为了好友 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.ADD_FRIEND_REQUEST_EX">
            <summary>
            对方请求加你为好友
            当对方使用0x00A8命令发送认证消息，才会收到此系统通知
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemMessageType.ADD_FRIEND_APPROVED_AND_ADD">
            <summary>
            同意对方加自己为好友，同时加对方为好友
            </summary>
        </member>
        <member name="T:LumaQQ.NET.TempSessionSubCmd">
            <summary>
            子命令常量，用于命令0x0066
            </summary>
        </member>
        <member name="F:LumaQQ.NET.TempSessionSubCmd.SendIM">
            <summary>
            临时会话操作 - 发送临时会话消息
            </summary>
        </member>
        <member name="T:LumaQQ.NET.UserPropertySubCmd">
            <summary>
             子命令，用于0x0065
            </summary>
        </member>
        <member name="F:LumaQQ.NET.UserPropertySubCmd.GET">
            <summary>
            得到用户属性
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ClusterSearchType">
            <summary>
            群的搜索方式 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterSearchType.By_ID">
            <summary>
            根据群号搜索 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterSearchType.Demo">
            <summary>
            搜索示范群
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FaceType">
            <summary>
            以下常量用于消息中的表情，对于自定义表情的表示格式参考NormalIM.java的注释
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.DEFAULT">
            <summary>
            系统自带表情前导字节
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.CUSTOM">
            <summary>
             自定义表情前导字节
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.NEW_CUSTOM">
            <summary>
            新自定义表情，普通格式 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.EXISTING_CUSTOM">
            <summary>
            已经出现过的自定义表情 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.NEW_SERVER_SIDE_CUSTOM">
            <summary>
            新自定义表情，存储在服务器端
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.EXISTING_SERVER_SIDE_CUSTOM_SIDE">
            <summary>
            已经出现过的服务器端自定义表情 
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.UNKNOWN_1">
            <summary>
            未知自定义表情格式描述1，未知含义
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FaceType.UNKNOWN_2">
            <summary>
            未知自定义表情格式描述2，未知含义 
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ClusterSubCmd">
            <summary>
            群操作子命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterSubCmd.ADD_MEMBER">
            <summary>
            添加成员，用在修改成员列表命令中
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterSubCmd.REMOVE_MEMBER">
            <summary>
            删除成员，用在修改成员列表命令中
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterSubCmd.GET_SUBJECT_LIST">
            <summary>
            得到群内的讨论组列表
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ClusterSubCmd.GET_DIALOG_LIST">
            <summary>
            得到多人对话列表
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FriendLevelSubCmd">
            <summary>
            0x005C 好友等级的子命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendLevelSubCmd.GET">
            <summary>
            得到好友等级信息
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FriendListSort">
            <summary>
            好友列表排序
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendListSort.Unsorted">
            <summary>
            不对得到的好友列表排序
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendListSort.Sorted">
            <summary>
            对得到的好友列表排序 
            </summary>
        </member>
        <member name="T:LumaQQ.NET.GetOnlineSubCmd">
            <summary>
            子命令常量，用于命令0x0027
            </summary>
        </member>
        <member name="F:LumaQQ.NET.GetOnlineSubCmd.GET_ONLINE_FRIEND">
            <summary>
            得到在线好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.GetOnlineSubCmd.GET_ONLINE_SERVICE">
            <summary>
            得到系统服务
            </summary>
        </member>
        <member name="T:LumaQQ.NET.FriendSearchType">
            <summary>
            这是搜索用户时指定的搜索类类型，比如是查看全部在线用户，还是自定义查找
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendSearchType.SEARCH_ALL">
            <summary>
            看谁在线上
            </summary>
        </member>
        <member name="F:LumaQQ.NET.FriendSearchType.SEARCH_CUSTOM">
            <summary>
            自定义搜索
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ReplyType">
            <summary>
            消息回复类型
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyType.NORMAL">
            <summary>
            正常回复
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ReplyType.AUTO">
            <summary>
            自动回复
            </summary>
        </member>
        <member name="T:LumaQQ.NET.SMSContentType">
            <summary>
            短消息内容
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SMSContentType.NORMAL">
            <summary>
            普通短消息
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SMSContentType.LOVE_WORD">
            <summary>
            言语传情
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SMSContentType.PICTURE">
            <summary>
            精美图片
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SMSContentType.RING">
            <summary>
            悦耳铃声
            </summary>
        </member>
        <member name="T:LumaQQ.NET.SMSSendMode">
            <summary>
            发送模式
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SMSSendMode.HAND_FREE">
            <summary>
             免提短信
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SMSSendMode.NORMAL">
            <summary>
            普通
            </summary>
        </member>
        <member name="T:LumaQQ.NET.WeatherSubCmd">
            <summary>
            子命令，用于0x00A6
            </summary>
        </member>
        <member name="F:LumaQQ.NET.WeatherSubCmd.Get">
            <summary>
            得到天气数据 
            </summary>
        </member>
        <member name="T:LumaQQ.NET.SystemIMType">
            <summary>
            系统消息类别
            </summary>
        </member>
        <member name="F:LumaQQ.NET.SystemIMType.QQ_RECV_IM_KICK_OUT">
            <summary>
            同一个QQ号在其他地方登录，我被踢出
            </summary>
        </member>
        <member name="T:LumaQQ.NET.AuthAction">
            <summary>
            这三个常量用在添加好友认证的包中，表示你是请求，或者你拒绝还是同意别人的请求
            </summary>
        </member>
        <member name="F:LumaQQ.NET.AuthAction.Approve">
            <summary>
             通过认证
            </summary>
        </member>
        <member name="F:LumaQQ.NET.AuthAction.Reject">
            <summary>
            拒绝认证
            </summary>
        </member>
        <member name="F:LumaQQ.NET.AuthAction.Request">
            <summary>
            请求认证
            </summary>
        </member>
        <member name="T:LumaQQ.NET.RevenseAdd">
            <summary>
            是否允许对方也加自己为好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RevenseAdd.Allow">
            <summary>
            允许对方也加自己为好友
            </summary>
        </member>
        <member name="F:LumaQQ.NET.RevenseAdd.NotAll">
            <summary>
            不允许对方加自己为好友
            </summary>
        </member>
        <member name="T:LumaQQ.NET.ValueSet">
            <summary>
            是否设置一个选项，用在如0x005E这样的命令中，其他地方如果类似也可使用
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ValueSet.Set">
            <summary>
            设置
            </summary>
        </member>
        <member name="F:LumaQQ.NET.ValueSet.UnSet">
            <summary>
            取消设置
            </summary>
        </member>
        <member name="T:LumaQQ.NET.PrivacySubCmd">
            <summary>
            0x005E 私密设置的子命令
            </summary>
        </member>
        <member name="F:LumaQQ.NET.PrivacySubCmd.SearchMeByOnly">
            <summary>
            只能通过号码搜到我
            </summary>
        </member>
        <member name="F:LumaQQ.NET.PrivacySubCmd.ShareGeography">
            <summary>
            共享地理位置
            </summary>
        </member>
        <member name="T:LumaQQ.NET.QQUser">
            <summary>
            封装QQ用户的信息
            	<remark>abu 2008-02-16 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.QQUser.#ctor(System.Int32,System.String)">
            <summary>
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="qqNum">QQ号.</param>
            <param name="pwd">密码.</param>
        </member>
        <member name="M:LumaQQ.NET.QQUser.SetPassword(System.String)">
            <summary>
            设置用户的密码，不会保存明文形式的密码，立刻用Double MD5算法加密
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="pwd">明文形式的密码</param>
        </member>
        <member name="P:LumaQQ.NET.QQUser.QQ">
            <summary>QQ号
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.SessionKey">
            <summary>会话密钥
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.PasswordKey">
            <summary>MD5处理的用户密码
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.IP">
            <summary>本地IP
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.LastLoginIp">
            <summary>上一次登陆IP
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Port">
            <summary>本地端口，在QQ中其实只有两字节
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.ServerIp">
            <summary>服务器IP
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.ServerPort">
            <summary>服务器端口，在QQ中其实只有两字节
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.LastLoginTime">
            <summary>上一次登陆时间，在QQ中其实只有4字节
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.LoginTime">
            <summary>本次登陆时间
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.IsLoggedIn">
            <summary>当前登陆状态，为true表示已经登陆
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.LoginMode">
            <summary>登陆模式，隐身还是非隐身
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.IsUdp">
            <summary>设置登陆服务器的方式是UDP还是TCP
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Status">
            <summary>当前的状态，比如在线，隐身等等
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.ContactInfo">
            <summary>ContactInfo
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.FileSessionKey">
            <summary>文件传输会话密钥
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.FileAgentKey">
            <summary>文件中转服务器通讯密钥，来自0x001D - 0x4
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.FileAgentToken">
            <summary>文件中转认证令牌
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Unknown03Token">
            <summary>未知令牌
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.IsShowFakeCam">
            <summary>是否显示虚拟摄像头
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.ClientKey">
            <summary>客户端key
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.InitKey">
            <summary>初始密钥
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.LoginToken">
            <summary>登录令牌
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Unknown03Key">
            <summary>未知用途密钥，来自0x001D
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Unknown06Token">
            <summary>未知令牌
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.AuthToken">
            <summary> 认证令牌
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Signature">
            <summary>个性签名
            Gets or sets the signature.
            </summary>
            <value>The signature.</value>
        </member>
        <member name="P:LumaQQ.NET.QQUser.Friends">
            <summary>
            QQ好友列表
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="M:LumaQQ.NET.Events.ProcessorRouter.InstallProcessor(LumaQQ.NET.Events.IPacketListener)">
            <summary>装载包处理器
            	<remark>abu 2008-03-04 </remark>
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:LumaQQ.NET.Threading.ICallable">
            <summary>
            可以被提交到线程池异步处理的接口
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.ICallable.Call(System.Object)">
            <summary>
            WaitCallback回调
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:LumaQQ.NET.Threading.ICallable.IsRunning">
            <summary>
            是否已经在运行
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Threading.IRunable">
            <summary>
            可以被提交到线程池定时运行的接口
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.IRunable.Run(System.Object,System.Boolean)">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="state">The state.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="P:LumaQQ.NET.Threading.IRunable.IsRunning">
            <summary>是否已经在运行
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Threading.IRunable.WaitHandler">
            <summary>
            注册在线程池后的信号变量
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Threading.IRunable.RegisterdHandler">
            <summary>
            注册后的对象
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Threading.KeepAliveTrigger">
            <summary>
            保持登录状态触发器
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.KeepAliveTrigger.Run(System.Object,System.Boolean)">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="state">The state.</param>
            <param name="timedOut">if set to <c>true</c> [timed out].</param>
        </member>
        <member name="M:LumaQQ.NET.Threading.KeepAliveTrigger.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:LumaQQ.NET.Threading.KeepAliveTrigger.IsRunning">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Threading.KeepAliveTrigger.WaitHandler">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="P:LumaQQ.NET.Threading.KeepAliveTrigger.RegisterdHandler">
            <summary>
            	<remark>abu 2008-03-11 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Threading.PacketIncomeTrigger">
            <summary>包括处理触发器
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.PacketIncomeTrigger.Call(System.Object)">
            <summary>
            WaitCallback回调
            <remark>abu 2008-03-07 </remark>
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="P:LumaQQ.NET.Threading.PacketIncomeTrigger.IsRunning">
            <summary>
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <value></value>
        </member>
        <member name="T:LumaQQ.NET.Threading.ResendTrigger">
            <summary>重发包触发器
            	<remark>abu 2008-03-11 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.Add(LumaQQ.NET.Packets.OutPacket,System.String)">
            <summary>添加一个包到超时队列
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.Clear">
            <summary>清空重发队列
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.Get">
            <summary> 得到超时队列的第一个包，不把它从队列中删除
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.Remove">
            <summary>
            得到超时队列的第一个包，并把它从队列中删除
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.Remove(LumaQQ.NET.Packets.InPacket)">
            <summary>删除ack对应的请求包
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="ack">The ack.</param>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.GetTimeoutLeft">
            <summary>得到下一个包的超时时间
            下一个包的超时时间，如果队列为空，返回一个固定值
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Threading.ResendTrigger.FireOperationTimeOutEvent(LumaQQ.NET.Packets.OutPacket,System.String)">
            <summary>触发超时事件
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="T:LumaQQ.NET.Threading.ThreadExcutor">
            <summary>
            利用线程池来异步执行线程
            	<remark>abu 2008-03-07 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Threading.ThreadExcutor.Submit(LumaQQ.NET.Threading.ICallable,System.Object)">
            <summary>提交一个线程等待执行
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="callable">The callable.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:LumaQQ.NET.Threading.ThreadExcutor.RegisterIntervalObject(LumaQQ.NET.Threading.IRunable,System.Object,System.Int64,System.Boolean)">
            <summary>
            注册一个轮循线程
            	<remark>abu 2008-03-07 </remark>
            </summary>
            <param name="runnable">The runnable.</param>
            <param name="state">The state.</param>
            <param name="interval">The interval.</param>
        </member>
        <!-- 对于成员“T:System.ByteBuffer”忽略有格式错误的 XML 注释 -->
        <member name="M:System.ByteBuffer.#ctor">
            
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:System.ByteBuffer.#ctor(System.Byte[])">
            
            <summary>
            重载的构造函数,用一个Byte数组来构造
            </summary>
            <param name="bytes">用于构造ByteBuffer的数组</param>
        </member>
        <member name="M:System.ByteBuffer.ToByteArray">
            
            <summary>
            获取ByteBuffer所生成的数组
            长度必须小于 [MAXSIZE]
            </summary>
            <returns>Byte[]</returns>
        </member>
        <member name="M:System.ByteBuffer.Initialize">
            
            <summary>
            初始化ByteBuffer的每一个元素,并把当前指针指向头一位
            </summary>
        </member>
        <member name="M:System.ByteBuffer.Put(System.Byte)">
            
            <summary>
            向ByteBuffer压入一个字节
            </summary>
            <param name="by">一位字节</param>
        </member>
        <member name="M:System.ByteBuffer.Put(System.Int32,System.Byte)">
            <summary>
            在指定位置压入一个字节，Position不变
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="index">The index.</param>
            <param name="by">The by.</param>
        </member>
        <member name="M:System.ByteBuffer.Put(System.Byte[])">
            
            <summary>
            向ByteBuffer压入数组
            </summary>
            <param name="ByteArray">数组</param>
        </member>
        <member name="M:System.ByteBuffer.Put(System.Byte[],System.Int32,System.Int32)">
            <summary>
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="byteArray">The byte array.</param>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:System.ByteBuffer.PutUShort(System.UInt16)">
            
            <summary>
            向ByteBuffer压入两字节的Short
            </summary>
            <param name="Num">2字节Short</param>
        </member>
        <member name="M:System.ByteBuffer.PutUShort(System.Int32,System.UInt16)">
            <summary>
            在指定位置压入两个字节，Position不变
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="index">The index.</param>
            <param name="num">The num.</param>
        </member>
        <member name="M:System.ByteBuffer.PutChar(System.Char)">
            <summary>
            压入字符
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:System.ByteBuffer.PutChar(System.Int32,System.Char)">
            <summary>
            在指定位置压入两个字节，Position不变
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="index">The index.</param>
            <param name="c">The c.</param>
        </member>
        <member name="M:System.ByteBuffer.PutInt(System.UInt32)">
            
            <summary>
            向ByteBuffer压入一个无符Int值
            </summary>
            <param name="Num">4字节UInt32</param>
        </member>
        <member name="M:System.ByteBuffer.PutInt(System.Int32)">
            <summary>向ByteBuffer压入一个Int值
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <param name="num">The num.</param>
        </member>
        <member name="M:System.ByteBuffer.PutInt(System.Int32,System.UInt32)">
            <summary>在指定位置压入4个字节，Position不变
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="index">The index.</param>
            <param name="num">The num.</param>
        </member>
        <member name="M:System.ByteBuffer.PutLong(System.Int64)">
            
            <summary>
            向ByteBuffer压入一个Long值
            </summary>
            <param name="Num">4字节Long</param>
        </member>
        <member name="M:System.ByteBuffer.PutLong(System.Int32,System.Int64)">
            <summary>在指定位置压入4个字节，Position不变
            	<remark>abu 2008-02-19 </remark>
            </summary>
            <param name="index">The index.</param>
            <param name="Num">The num.</param>
        </member>
        <member name="M:System.ByteBuffer.Get(System.Int32)">
            
            <summary>
            从指定的位置提取1个字节的byte，保持原有的位置不变
            </summary>
            <returns>1字节Byte</returns>
        </member>
        <member name="M:System.ByteBuffer.Get">
            <summary>从ByteBuffer的当前位置弹出一个Byte,并提升一位
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetUShort(System.Int32)">
            
            <summary>
            从指定的位置提取两个字节的Short，保持原有的位置不变
            </summary>
            <returns>2字节Short</returns>
        </member>
        <member name="M:System.ByteBuffer.GetUShort">
            <summary>从ByteBuffer的当前位置弹出一个Short,并提升两位
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetChar">
            <summary>
            弹出一个字符
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetChar(System.Int32)">
            <summary>从指定的位置提取两个字节的char，保持原有的位置不变
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetUInt">
            
            <summary>
            从ByteBuffer的当前位置弹出一个uint,并提升4位
            </summary>
            <returns>4字节UInt</returns>
        </member>
        <member name="M:System.ByteBuffer.GetInt">
            <summary>从ByteBuffer的当前位置弹出一个int,并提升4位
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetUInt(System.Int32)">
            <summary>从指定的位置提取4个字节的uint，保持原有的位置不变
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetLong">
            
            <summary>
            从ByteBuffer的当前位置弹出一个long,并提升4位
            </summary>
            <returns>4字节Long</returns>
        </member>
        <member name="M:System.ByteBuffer.GetLong(System.Int32)">
            <summary>从指定的位置提取4个字节的long，保持原有的位置不变
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.GetByteArray(System.Int32)">
            
            <summary>
            从ByteBuffer的当前位置弹出长度为Length的Byte数组,提升Length位
            </summary>
            <param name="Length">数组长度</param>
            <returns>Length长度的byte数组</returns>
        </member>
        <member name="M:System.ByteBuffer.HasRemaining">
            <summary>
            判断是否到结尾
            	<remark>abu 2008-02-20 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.Remaining">
            <summary>
            剩余字节数
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ByteBuffer.Rewind">
            <summary>重绕此缓冲区。将位置设置为 0 并丢弃标记。
            	<remark>abu 2008-02-26 </remark>
            </summary>
        </member>
        <member name="P:System.ByteBuffer.Length">
            
            <summary>
            获取当前ByteBuffer的长度
            当用于接收网络数据流的时候，这个属性必须是可以被赋值的。
            </summary>
        </member>
        <member name="P:System.ByteBuffer.Position">
            
            <summary>
            获取/设置当前出栈指针位置
            </summary>
        </member>
        <member name="P:System.ByteBuffer.ByteArray">
            <summary>
            返回用于存储的字节数组
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.plain">
            <summary>
            当前的明文块
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.prePlain">
            <summary>
            前面的明文块
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.outData">
            <summary>
            输出的密文或明文
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.crypt">
            <summary>
            当前加密的密文位置和上一次加密的密文块位置，它们相差8
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.preCrypt">
            <summary>
            当前加密的密文位置和上一次加密的密文块位置，它们相差8
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.pos">
            <summary>
            当前处理的加密解密块的位置
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.padding">
            <summary>
            填充数（长度）
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.key">
            <summary>
            密钥
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.header">
            <summary>
            用于加密时，表示当前是否是第一个8字节块，因为加密算法是反馈的,
            但是最开始的8个字节没有反馈可用，所以要标明这种情况。
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.contextStart">
            <summary>
            这个表示当前解密开始的位置，之所以要这么一个变量是为了避免当解密到最后时
            后面已经没有数据，这时候就会出错，这个变量就是用来判断这种情况免得出错
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.random">
            <summary>
            随机数对象
            </summary>
        </member>
        <member name="F:LumaQQ.NET.Utils.Crypter.baos">
            <summary>
            字节输出流
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Decrypt(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            解密
            	<remark>abu 2008-02-15 </remark>
            </summary>
            <param name="inData">密文</param>
            <param name="offset">密文开始的位置</param>
            <param name="len">密文长度</param>
            <param name="k">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            需要被解密的密文
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <param name="inData">密文</param>
            <param name="k">密钥</param>
            <returns>已解密的消息</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Encrypt(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            加密
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <param name="inData">明文字节数组</param>
            <param name="offset">开始加密的偏移</param>
            <param name="len">加密长度</param>
            <param name="k">密钥</param>
            <returns>密文字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <param name="inData">需要加密的明文</param>
            <param name="k">密钥</param>
            <returns>密文字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Encipher(System.Byte[])">
            <summary>
            加密一个8字节块
            	<remark>abu 2008-02-15  </remark>
            </summary>
            <param name="inData">明文字节数组</param>
            <returns>密文字节数组</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Decipher(System.Byte[],System.Int32)">
            <summary>
            解密从offset开始的8字节密文
            	<remark>abu 2008-02-15 </remark>
            </summary>
            <param name="inData">密文字节数组</param>
            <param name="offset">密文开始位置.</param>
            <returns>明文</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Decipher(System.Byte[])">
            <summary>解密
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <param name="inData">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Encrypt8Bytes">
            <summary>
            加密8字节
            	<remark>abu 2008-02-16 </remark>
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Decrypt8Bytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解密8个字节
            	<remark>abu 2008-02-15 </remark>
            </summary>
            <param name="inData">密文字节数组.</param>
            <param name="offset">从何处开始解密.</param>
            <param name="len">密文的长度.</param>
            <returns>true表示解密成功</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.Rand">
            <summary>
            这是个随机因子产生器，用来填充头部的，如果为了调试，可以用一个固定值
            随机因子可以使相同的明文每次加密出来的密文都不一样
            	<remark>abu 2008-02-16 </remark>
            </summary>
            <returns>随机因子</returns>        
        </member>
        <member name="M:LumaQQ.NET.Utils.Crypter.MD5(System.Byte[])">
            <summary>
            MD5加密
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="T:System.Check">
            <summary>
            Design By Contract Checks.
            
            Each method generates an exception or
            a trace assertion statement if the contract is broken.
            </summary>
            <remarks>
            This example shows how to call the Require method.
            Assume DBC_CHECK_PRECONDITION is defined.
            <code>
            public void Test(int x)
            {
            	try
            	{
            		Check.Require(x > 1, "x must be > 1");
            	}
            	catch (System.Exception ex)
            	{
            		Console.WriteLine(ex.ToString());
            	}
            }
            </code>
            </remarks>
            
        </member>
        <member name="F:System.Check.NotNull">
            <summary>
            NotNullCheckStrategy singleton
            </summary>
        </member>
        <member name="F:System.Check.NotNullOrEmpty">
            <summary>
            NotNullOrEmptyStrategy singleton
            </summary>
        </member>
        <member name="M:System.Check.IsAssignableTo``1">
            <summary>
            Create IsAssignableToStrategy inatance
            </summary>
            <typeparam name="TargetType">The type</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.Check.GreaterThan``1(``0)">
            <summary>
            &gt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Check.LessThan``1(``0)">
            <summary>
            &lt;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Check.GreaterThanOrEqual``1(``0)">
            <summary>
            &gt;=
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Check.LessThanOrEqual``1(``0)">
            <summary>
            &lt;=
            </summary>
            <typeparam name="T"></typeparam>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Check.Require(System.Boolean,System.String)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:System.Check.Require(System.Boolean,System.String,System.Exception)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:System.Check.Require(System.Boolean)">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:System.Check.Require(System.Object,System.String,System.Check.ICheckStrategy[])">
            <summary>
            Precondition check.
            </summary>
        </member>
        <member name="M:System.Check.Ensure(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:System.Check.Ensure(System.Boolean,System.String,System.Exception)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:System.Check.Ensure(System.Boolean)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:System.Check.Ensure(System.Object,System.String,System.Check.ICheckStrategy[])">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:System.Check.Invariant(System.Boolean,System.String)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:System.Check.Invariant(System.Boolean,System.String,System.Exception)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:System.Check.Invariant(System.Boolean)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:System.Check.Invariant(System.Object,System.String,System.Check.ICheckStrategy[])">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:System.Check.Assert(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:System.Check.Assert(System.Boolean,System.String,System.Exception)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:System.Check.Assert(System.Boolean)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:System.Check.Assert(System.Object,System.String,System.Check.ICheckStrategy[])">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="P:System.Check.UseExceptions">
            <summary>
            Is exception handling being used?
            </summary>
        </member>
        <member name="T:System.Check.ICheckStrategy">
            <summary>
            ICheckStrategy
            </summary>
        </member>
        <member name="M:System.Check.ICheckStrategy.Pass(System.Object)">
            <summary>
            Chech the obj with the strategy
            </summary>
            <param name="obj">the obj</param>
            <returns>true for pass, or return false</returns>
        </member>
        <member name="M:System.Check.ICheckStrategy.GetFailingMessage(System.String)">
            <summary>
            Get the message when check failed
            </summary>
            <param name="objName"></param>
            <returns></returns>
        </member>
        <member name="T:System.DesignByContractException">
            <summary>
            Exception raised when a contract is broken.
            Catch this exception type if you wish to differentiate between 
            any DesignByContract exception and other runtime exceptions.
             
            </summary>
        </member>
        <member name="M:System.DesignByContractException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.DesignByContractException"/> class.
            </summary>
        </member>
        <member name="M:System.DesignByContractException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DesignByContractException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:System.DesignByContractException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DesignByContractException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:System.PreconditionException">
            <summary>
            Exception raised when a precondition fails.
            </summary>
        </member>
        <member name="M:System.PreconditionException.#ctor">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="M:System.PreconditionException.#ctor(System.String)">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="M:System.PreconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Precondition Exception.
            </summary>
        </member>
        <member name="T:System.PostconditionException">
            <summary>
            Exception raised when a postcondition fails.
            </summary>
        </member>
        <member name="M:System.PostconditionException.#ctor">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:System.PostconditionException.#ctor(System.String)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:System.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="T:System.InvariantException">
            <summary>
            Exception raised when an invariant fails.
            </summary>
        </member>
        <member name="M:System.InvariantException.#ctor">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:System.InvariantException.#ctor(System.String)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:System.InvariantException.#ctor(System.String,System.Exception)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="T:System.AssertionException">
            <summary>
            Exception raised when an assertion fails.
            </summary>
        </member>
        <member name="M:System.AssertionException.#ctor">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:System.AssertionException.#ctor(System.String)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:System.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetUInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            把字节数组从offset开始的len个字节转换成一个unsigned int，
            	<remark>abu 2008-02-15 14:47 </remark>
            </summary>
            <param name="inData">字节数组</param>
            <param name="offset">从哪里开始转换.</param>
            <param name="len">转换长度, 如果len超过8则忽略后面的.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetString(System.Byte[],System.String)">
            <summary>
            根据某种编码方式将字节数组转换成字符串
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="b">字节数组</param>
            <param name="encoding">encoding 编码方式</param>
            <returns> 如果encoding不支持，返回一个缺省编码的字符串</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetString(System.Byte[])">
            <summary>
            根据缺省编码将字节数组转换成字符串
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="b">字节数组</param>
            <returns>字符串</returns>
        </member>
        <!-- 对于成员“M:LumaQQ.NET.Utils.Util.GetString(System.ByteBuffer)”忽略有格式错误的 XML 注释 -->
        <member name="M:LumaQQ.NET.Utils.Util.GetString(System.ByteBuffer,System.Int32)">
            <summary>从buf的当前位置解析出一个字符串，直到碰到了buf的结尾或者读取了len个byte之后停止
            此方法不负责调整buf位置，调用之前务必使buf当前位置处于字符串开头。在读取完成
            * 后，buf当前位置将位于len字节之后或者最后之后
            	<remark>abu 2008-02-25 </remark>
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetString(System.ByteBuffer,System.Byte,System.Int32)">
            <summary>
            * 从buf的当前位置解析出一个字符串，直到碰到了delimit或者读取了maxLen个byte或者
            * 碰到结尾之后停止
            *此方法不负责调整buf位置，调用之前务必使buf当前位置处于字符串开头。在读取完成
            *后，buf当前位置将位于maxLen之后
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="delimit">The delimit.</param>
            <param name="maxLen">The max len.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>根据某种编码方式将字节数组转换成字符串
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="b">The b.</param>
            <param name="offset">The offset.</param>
            <param name="len">The len.</param>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetString(System.ByteBuffer,System.Byte)">
            <summary>
            从buf的当前位置解析出一个字符串，直到碰到一个分隔符为止，或者到了buf的结尾
            此方法不负责调整buf位置，调用之前务必使buf当前位置处于字符串开头。在读取完成
            * 后，buf当前位置将位于分隔符之后
            	<remark>abu 2008-02-23 </remark>
            </summary>
            <param name="buf">The buf.</param>
            <param name="delimit">The delimit.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetInt(System.String,System.Int32)">
            <summary>
            把字符串转换成int
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="s">字符串</param>
            <param name="defaultValue">如果转换失败，返回这个值</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetBytes(System.String)">
            <summary>
            字符串转二进制字数组
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.RandomKey">
            <summary>一个随机产生的密钥字节数组
            	<remark>abu 2008-02-18 </remark>
            </summary>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetEncodingString(LumaQQ.NET.Charset)">
            <summary>这个不是用于调试的，真正要用的方法
            	<remark>abu 2008-02-22 </remark>
            </summary>
            <param name="encoding">编码方式.</param>
            <returns>编码方式的字符串表示形式</returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetTimeMillis(System.DateTime)">
            <summary>
            用于代替 System.currentTimeMillis()
            	<remark>abu 2008-02-29 </remark>
            </summary>
            <param name="dateTime">The date time.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetDateTimeFromMillis(System.Int64)">
            <summary>
            根据服务器返回的毫秒表示的日期，获得实际的日期
            Gets the date time from millis.
            似乎服务器返回的日期要加上8个小时才能得到正确的 +8 时区的登录时间
            </summary>
            <param name="millis">The millis.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.IsIPZero(System.Byte[])">
            <summary>判断IP是否全0
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <param name="ip">The ip.</param>
            <returns></returns>
        </member>
        <member name="M:LumaQQ.NET.Utils.Util.GetIpStringFromBytes(System.Byte[])">
            <summary>ip的字节数组形式转为字符串形式的ip
            	<remark>abu 2008-03-08 </remark>
            </summary>
            <param name="ip">The ip.</param>
            <returns></returns>
        </member>
    </members>
</doc>
